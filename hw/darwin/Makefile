# Makefile.in generated by automake 1.10 from Makefile.am.
# hw/darwin/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.







pkgdatadir = $(datadir)/xorg-server
pkglibdir = $(libdir)/xorg-server
pkgincludedir = $(includedir)/xorg-server
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
bin_PROGRAMS = XDarwin$(EXEEXT) Xquartz$(EXEEXT)
#am__append_1 = -DDARWIN_WITH_QUARTZ -DXFree86Server
#macos_PROGRAMS = XDarwinApp$(EXEEXT)
subdir = hw/darwin
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/include/do-not-use-config.h \
	$(top_builddir)/include/xorg-server.h \
	$(top_builddir)/include/dix-config.h \
	$(top_builddir)/include/xgl-config.h \
	$(top_builddir)/include/xorg-config.h \
	$(top_builddir)/include/xkb-config.h \
	$(top_builddir)/include/xwin-config.h \
	$(top_builddir)/include/kdrive-config.h
CONFIG_CLEAN_FILES =
LIBRARIES = $(noinst_LIBRARIES)
ARFLAGS = cru
libdarwinShared_a_AR = $(AR) $(ARFLAGS)
libdarwinShared_a_LIBADD =
am_libdarwinShared_a_OBJECTS = darwin.$(OBJEXT) darwinEvents.$(OBJEXT) \
	darwinKeyboard.$(OBJEXT)
libdarwinShared_a_OBJECTS = $(am_libdarwinShared_a_OBJECTS)
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
am__installdirs = "$(DESTDIR)$(crplugindir)" \
	"$(DESTDIR)$(fullscreenplugindir)" \
	"$(DESTDIR)$(glxAGLplugindir)" "$(DESTDIR)$(glxCGLplugindir)" \
	"$(DESTDIR)$(glxMesaplugindir)" "$(DESTDIR)$(xprplugindir)" \
	"$(DESTDIR)$(bindir)" "$(DESTDIR)$(macosdir)" \
	"$(DESTDIR)$(macosdir)" "$(DESTDIR)$(man1dir)"
crpluginLTLIBRARIES_INSTALL = $(INSTALL)
fullscreenpluginLTLIBRARIES_INSTALL = $(INSTALL)
glxAGLpluginLTLIBRARIES_INSTALL = $(INSTALL)
glxCGLpluginLTLIBRARIES_INSTALL = $(INSTALL)
glxMesapluginLTLIBRARIES_INSTALL = $(INSTALL)
xprpluginLTLIBRARIES_INSTALL = $(INSTALL)
LTLIBRARIES = $(crplugin_LTLIBRARIES) $(fullscreenplugin_LTLIBRARIES) \
	$(glxAGLplugin_LTLIBRARIES) $(glxCGLplugin_LTLIBRARIES) \
	$(glxMesaplugin_LTLIBRARIES) $(xprplugin_LTLIBRARIES)
am__cr_la_SOURCES_DIST = quartz/cr/crAppleWM.m quartz/cr/crFrame.m \
	quartz/cr/crScreen.m quartz/fullscreen/quartzCursor.c \
	quartz/cr/XView.m
#am_cr_la_OBJECTS = crAppleWM.lo crFrame.lo crScreen.lo \
#	quartzCursor.lo XView.lo
cr_la_OBJECTS = $(am_cr_la_OBJECTS)
cr_la_LINK = $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link \
	$(OBJCLD) $(AM_OBJCFLAGS) $(OBJCFLAGS) $(cr_la_LDFLAGS) \
	$(LDFLAGS) -o $@
#am_cr_la_rpath = -rpath $(crplugindir)
am__fullscreen_la_SOURCES_DIST = quartz/fullscreen/fullscreen.c \
	quartz/fullscreen/quartzCursor.c
#am_fullscreen_la_OBJECTS = fullscreen.lo quartzCursor.lo
fullscreen_la_OBJECTS = $(am_fullscreen_la_OBJECTS)
fullscreen_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(fullscreen_la_LDFLAGS) $(LDFLAGS) -o $@
#am_fullscreen_la_rpath = -rpath $(fullscreenplugindir)
am_glxAGL_la_OBJECTS =
glxAGL_la_OBJECTS = $(am_glxAGL_la_OBJECTS)
glxAGL_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(glxAGL_la_LDFLAGS) $(LDFLAGS) -o $@
#am_glxAGL_la_rpath = -rpath \
#	$(glxAGLplugindir)
am_glxCGL_la_OBJECTS =
glxCGL_la_OBJECTS = $(am_glxCGL_la_OBJECTS)
glxCGL_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(glxCGL_la_LDFLAGS) $(LDFLAGS) -o $@
#am_glxCGL_la_rpath = -rpath \
#	$(glxCGLplugindir)
am_glxMesa_la_OBJECTS =
glxMesa_la_OBJECTS = $(am_glxMesa_la_OBJECTS)
glxMesa_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(glxMesa_la_LDFLAGS) $(LDFLAGS) -o $@
##am_glxMesa_la_rpath = -rpath \
##	$(glxMesaplugindir)
am__xpr_la_SOURCES_DIST = quartz/xpr/appledri.c quartz/xpr/dri.c \
	quartz/xpr/xprAppleWM.c quartz/xpr/xprCursor.c \
	quartz/xpr/xprFrame.c quartz/xpr/xprScreen.c \
	quartz/xpr/x-hash.c quartz/xpr/x-hook.c quartz/xpr/x-list.c
#am_xpr_la_OBJECTS = appledri.lo dri.lo \
#	xprAppleWM.lo xprCursor.lo xprFrame.lo \
#	xprScreen.lo x-hash.lo x-hook.lo x-list.lo
xpr_la_OBJECTS = $(am_xpr_la_OBJECTS)
xpr_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(xpr_la_LDFLAGS) \
	$(LDFLAGS) -o $@
#am_xpr_la_rpath = -rpath $(xprplugindir)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
macosPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS) $(macos_PROGRAMS)
am_XDarwin_OBJECTS = XDarwin-fbcmap_mi.$(OBJEXT) \
	XDarwin-miinitext.$(OBJEXT) XDarwin-stubs.$(OBJEXT)
XDarwin_OBJECTS = $(am_XDarwin_OBJECTS)
am__DEPENDENCIES_1 =
XDarwin_DEPENDENCIES = $(top_builddir)/dix/dixfonts.lo \
	$(top_builddir)/dix/libdix.la \
	$(top_builddir)/config/libconfig.a ./libdarwinShared.a \
	./iokit/libiokit.a $(top_builddir)/miext/shadow/libshadow.la \
	$(top_builddir)/miext/cw/libcw.la $(am__DEPENDENCIES_1) \
	$(top_builddir)/miext/rootless/librootless.la \
	$(top_builddir)/miext/rootless/safeAlpha/libsafeAlpha.la \
	$(top_builddir)/miext/rootless/accel/librlAccel.la \
	$(am__DEPENDENCIES_1)
XDarwin_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(XDarwin_CFLAGS) $(CFLAGS) \
	$(XDarwin_LDFLAGS) $(LDFLAGS) -o $@
am__XDarwinApp_SOURCES_DIST = $(top_srcdir)/fb/fbcmap_mi.c \
	$(top_srcdir)/mi/miinitext.c $(top_srcdir)/Xi/stubs.c
#am_XDarwinApp_OBJECTS = XDarwinApp-fbcmap_mi.$(OBJEXT) \
#	XDarwinApp-miinitext.$(OBJEXT) \
#	XDarwinApp-stubs.$(OBJEXT)
XDarwinApp_OBJECTS = $(am_XDarwinApp_OBJECTS)
#XDarwinApp_DEPENDENCIES =  \
#	$(top_builddir)/dix/dixfonts.lo \
#	$(top_builddir)/dix/libdix.la \
#	$(top_builddir)/config/libconfig.a \
#	$(top_builddir)/os/libos.la \
#	./quartz/XApplication.o ./libdarwinShared.a \
#	./quartz/libXQuartz.a \
#	$(top_builddir)/miext/shadow/libshadow.la \
#	$(top_builddir)/miext/cw/libcw.la \
#	$(am__DEPENDENCIES_1) \
#	$(top_builddir)/miext/rootless/librootless.la \
#	$(top_builddir)/miext/rootless/safeAlpha/libsafeAlpha.la \
#	$(top_builddir)/miext/rootless/accel/librlAccel.la \
#	$(am__DEPENDENCIES_1)
XDarwinApp_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(XDarwinApp_CFLAGS) \
	$(CFLAGS) $(XDarwinApp_LDFLAGS) $(LDFLAGS) -o $@
am_Xquartz_OBJECTS = Xquartz-fbcmap_mi.$(OBJEXT) \
	Xquartz-miinitext.$(OBJEXT) Xquartz-stubs.$(OBJEXT) \
	X11Application.$(OBJEXT) X11Controller.$(OBJEXT) \
	Preferences.$(OBJEXT) Xquartz-applewm.$(OBJEXT) \
	Xquartz-keysym2ucs.$(OBJEXT) Xquartz-pseudoramiX.$(OBJEXT) \
	Xquartz-quartz.$(OBJEXT) Xquartz-quartzAudio.$(OBJEXT) \
	quartzCocoa.$(OBJEXT) Xquartz-quartzKeyboard.$(OBJEXT) \
	Xquartz-quartzPasteboard.$(OBJEXT) \
	Xquartz-quartzStartup.$(OBJEXT) Xquartz-appledri.$(OBJEXT) \
	Xquartz-dri.$(OBJEXT) Xquartz-xprAppleWM.$(OBJEXT) \
	Xquartz-xprCursor.$(OBJEXT) Xquartz-xprFrame.$(OBJEXT) \
	Xquartz-xprScreen.$(OBJEXT) Xquartz-x-hash.$(OBJEXT) \
	Xquartz-x-hook.$(OBJEXT) Xquartz-x-list.$(OBJEXT)
Xquartz_OBJECTS = $(am_Xquartz_OBJECTS)
Xquartz_DEPENDENCIES = $(top_builddir)/dix/dixfonts.lo \
	$(top_builddir)/dix/libdix.la \
	$(top_builddir)/config/libconfig.a ./libdarwinShared.a \
	$(top_builddir)/miext/shadow/libshadow.la \
	$(top_builddir)/miext/cw/libcw.la $(am__DEPENDENCIES_1) \
	$(top_builddir)/miext/rootless/librootless.la \
	$(top_builddir)/miext/rootless/safeAlpha/libsafeAlpha.la \
	$(top_builddir)/miext/rootless/accel/librlAccel.la \
	$(am__DEPENDENCIES_1)
Xquartz_LINK = $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(OBJCLD) $(AM_OBJCFLAGS) $(OBJCFLAGS) \
	$(Xquartz_LDFLAGS) $(LDFLAGS) -o $@
macosSCRIPT_INSTALL = $(INSTALL_SCRIPT)
SCRIPTS = $(macos_SCRIPTS)
DEFAULT_INCLUDES = -I. -I$(top_builddir)/include
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
OBJCCOMPILE = $(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS)
LTOBJCCOMPILE = $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS)
OBJCLD = $(OBJC)
SOURCES = $(libdarwinShared_a_SOURCES) $(cr_la_SOURCES) \
	$(fullscreen_la_SOURCES) $(glxAGL_la_SOURCES) \
	$(glxCGL_la_SOURCES) $(glxMesa_la_SOURCES) $(xpr_la_SOURCES) \
	$(XDarwin_SOURCES) $(XDarwinApp_SOURCES) $(Xquartz_SOURCES)
DIST_SOURCES = $(libdarwinShared_a_SOURCES) $(am__cr_la_SOURCES_DIST) \
	$(am__fullscreen_la_SOURCES_DIST) $(glxAGL_la_SOURCES) \
	$(glxCGL_la_SOURCES) $(glxMesa_la_SOURCES) \
	$(am__xpr_la_SOURCES_DIST) $(XDarwin_SOURCES) \
	$(am__XDarwinApp_SOURCES_DIST) $(Xquartz_SOURCES)
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-dvi-recursive install-exec-recursive \
	install-html-recursive install-info-recursive \
	install-pdf-recursive install-ps-recursive install-recursive \
	installcheck-recursive installdirs-recursive pdf-recursive \
	ps-recursive uninstall-recursive
man1dir = $(mandir)/man1
NROFF = nroff
MANS = $(man1_MANS)
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = iokit bundle quartz utils .
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /tmp/tmpiQUR1i/xorg-server-1.4.1~git20080105/missing --run aclocal-1.10
ADMIN_MAN_DIR = $(mandir)/man$(ADMIN_MAN_SUFFIX)
ADMIN_MAN_SUFFIX = 8
ALLOCA = 
AMTAR = ${SHELL} /tmp/tmpiQUR1i/xorg-server-1.4.1~git20080105/missing --run tar
APPDEFAULTDIR = 
APPLE_APPLICATIONS_DIR = ${exec_prefix}/bin/Applications
APP_MAN_DIR = $(mandir)/man$(APP_MAN_SUFFIX)
APP_MAN_SUFFIX = 1
AR = ar
AS = as
AUTOCONF = ${SHELL} /tmp/tmpiQUR1i/xorg-server-1.4.1~git20080105/missing --run autoconf
AUTOHEADER = ${SHELL} /tmp/tmpiQUR1i/xorg-server-1.4.1~git20080105/missing --run autoheader
AUTOMAKE = ${SHELL} /tmp/tmpiQUR1i/xorg-server-1.4.1~git20080105/missing --run automake-1.10
AWK = gawk
BASE_FONT_PATH = /usr/local/lib/X11/fonts
BUILD_DATE = 20080106
BUILD_TIME = 1171110
CC = gcc
CCAS = gcc
CCASDEPMODE = depmode=gcc3
CCASFLAGS = -g -O2
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
COMPILEDDEFAULTFONTPATH = /usr/local/lib/X11/fonts/misc/,/usr/local/lib/X11/fonts/TTF/,/usr/local/lib/X11/fonts/OTF,/usr/local/lib/X11/fonts/Type1/,/usr/local/lib/X11/fonts/100dpi/,/usr/local/lib/X11/fonts/75dpi/
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DARWIN_LIBS = 
DBUS_CFLAGS = -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include  
DBUS_LIBS = -ldbus-1  
DEFAULT_LIBRARY_PATH = /usr/local/lib
DEFAULT_LOGPREFIX = /usr/local/var/log/Xorg.
DEFAULT_MODULE_PATH = /usr/local/lib/xorg/modules
DEFS = -DHAVE_CONFIG_H -DUSE_NEW_CLUT $(am__append_1)
DEPDIR = .deps
DGA_CFLAGS =  
DGA_LIBS =  
DIX_CFLAGS = -DHAVE_DIX_CONFIG_H -Wall -Wpointer-arith -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -fno-strict-aliasing -D_BSD_SOURCE -DHAS_FCHOWN -DHAS_STICKY_DIR_BIT -DDBUS_API_SUBJECT_TO_CHANGE -I/usr/include/freetype2 -I/usr/include/pixman-1 -I/usr/include/hal -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include   -I$(top_srcdir)/include -I$(top_builddir)/include -I$(top_srcdir)/Xext -I$(top_srcdir)/composite -I$(top_srcdir)/damageext -I$(top_srcdir)/xfixes -I$(top_srcdir)/Xi -I$(top_srcdir)/mi -I$(top_srcdir)/miext/shadow  -I$(top_srcdir)/miext/damage -I$(top_srcdir)/render -I$(top_srcdir)/randr -I$(top_srcdir)/fb
DLLTOOL = dlltool
DMXEXAMPLES_DEP_CFLAGS = 
DMXEXAMPLES_DEP_LIBS = 
DMXMODULES_CFLAGS = -I/usr/include/freetype2 -I/usr/include/pixman-1  
DMXMODULES_LIBS = -lXmuu -lXext -lXrender -lX11 -lXfixes -lXfont -lXi -lXau -lXdmcp -lpixman-1  
DMXXIEXAMPLES_DEP_CFLAGS = 
DMXXIEXAMPLES_DEP_LIBS = 
DMXXMUEXAMPLES_DEP_CFLAGS = 
DMXXMUEXAMPLES_DEP_LIBS = 
DRIPROTO_CFLAGS = -I/usr/include/X11/dri  
DRIPROTO_LIBS =  
DRIVER_MAN_DIR = $(mandir)/man$(DRIVER_MAN_SUFFIX)
DRIVER_MAN_SUFFIX = 4
DRI_DRIVER_PATH = /usr/local/lib/dri
DTRACE = not_found
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
F77 = g77
FFLAGS = -g -O2
FILE_MAN_DIR = $(mandir)/man$(FILE_MAN_SUFFIX)
FILE_MAN_SUFFIX = 5
FREETYPE_CFLAGS = 
FREETYPE_LIBS = 
FREETYPE_REQUIRES = 
GLX_DEFINES = 
GL_CFLAGS =  
GL_LIBS =  
GREP = /bin/grep
HAL_CFLAGS = -DDBUS_API_SUBJECT_TO_CHANGE -I/usr/include/hal -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include  
HAL_LIBS = -lhal -ldbus-1  
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
KDRIVE_CFLAGS = 
KDRIVE_INCS = 
KDRIVE_LIBS = 
KDRIVE_LOCAL_LIBS = 
KDRIVE_PURE_INCS = 
KDRIVE_PURE_LIBS = 
LDFLAGS = 
LD_EXPORT_SYMBOLS_FLAG = -rdynamic
LEX = flex
LEXLIB = -lfl
LEX_OUTPUT_ROOT = lex.yy
LIBDRM_CFLAGS = -I/usr/include/drm  
LIBDRM_LIBS = -ldrm  
LIBOBJS = 
LIBS = -lm  -lrt
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIB_MAN_DIR = $(mandir)/man$(LIB_MAN_SUFFIX)
LIB_MAN_SUFFIX = 3
LINUXDOC = /usr/bin/linuxdoc
LN_S = ln -s
LTLIBOBJS = 
MAINT = 
MAKEINFO = ${SHELL} /tmp/tmpiQUR1i/xorg-server-1.4.1~git20080105/missing --run makeinfo
MAKE_HTML = SGML_SEARCH_PATH=NONE/share/sgml /usr/bin/linuxdoc  -B html --split=0
MAKE_PDF = /usr/bin/ps2pdf
MAKE_PS = SGML_SEARCH_PATH=NONE/share/sgml /usr/bin/linuxdoc -B latex --papersize=letter --output=ps
MAKE_TEXT = SGML_SEARCH_PATH=NONE/share/sgml GROFF_NO_SGR=y /usr/bin/linuxdoc -B txt
MESA_SOURCE = 
MISC_MAN_DIR = $(mandir)/man$(MISC_MAN_SUFFIX)
MISC_MAN_SUFFIX = 7
MKDIR_P = /bin/mkdir -p
MKFONTDIR = 
MKFONTSCALE = 
OBJC = $(CC)
OBJCCLD = 
OBJCDEPMODE = depmode=none
OBJCFLAGS = $(CFLAGS)
OBJCLINK = $(LINK)
OBJDUMP = objdump
OBJEXT = o
PACKAGE = xorg-server
PACKAGE_BUGREPORT = https://bugs.freedesktop.org/enter_bug.cgi?product=xorg
PACKAGE_NAME = xorg-server
PACKAGE_STRING = xorg-server 1.4.0.90
PACKAGE_TARNAME = xorg-server
PACKAGE_VERSION = 1.4.0.90
PATH_SEPARATOR = :
PERL = /usr/bin/perl
PIXMAN_CFLAGS = -I/usr/include/pixman-1  
PIXMAN_LIBS = -lpixman-1  
PKG_CONFIG = /usr/bin/pkg-config
PLIST_VENDOR_WEB = 
PLIST_VERSION_STRING = 
PROJECTROOT = /usr/local
PS2PDF = /usr/bin/ps2pdf
RANLIB = ranlib
RAWCPP = /usr/bin/cpp
RAWCPPFLAGS = -undef -traditional
RGB_DB = /usr/local/share/X11/rgb
SED = /bin/sed
SERVERCONFIGdir = /usr/local/lib/xserver
SET_MAKE = 
SHELL = /bin/sh
SOLARIS_ASM_CFLAGS = 
SOLARIS_INOUT_ARCH = 
STRIP = strip
SYS_LIBS = 
TSLIB_CFLAGS = 
TSLIB_LIBS = 
VENDOR_MAN_VERSION = Version 1.4.0.90
VENDOR_NAME = The X.Org Foundation
VENDOR_NAME_SHORT = X.Org
VENDOR_RELEASE = (((1) * 10000000) + ((4) * 100000) + ((0) * 1000) + 90)
VERSION = 1.4.0.90
X11EXAMPLES_DEP_CFLAGS = 
X11EXAMPLES_DEP_LIBS = 
XDMCP_CFLAGS =  
XDMCP_LIBS = -lXdmcp  
XDMXCONFIG_DEP_CFLAGS = 
XDMXCONFIG_DEP_LIBS = 
XDMX_LIBS = 
XEGLMODULES_CFLAGS = 
XEGLMODULES_LIBS = 
XEGL_LIBS = 
XEPHYR_CFLAGS = 
XEPHYR_INCS = 
XEPHYR_LIBS = 
XERRORDB_PATH = /usr/local/share/X11/XErrorDB
XF86CONFIGFILE = xorg.conf
XF86MISC_CFLAGS =  
XF86MISC_LIBS =  
XF86VIDMODE_CFLAGS =  
XF86VIDMODE_LIBS =  
XGLMODULES_CFLAGS = 
XGLMODULES_LIBS = 
XGLXMODULES_CFLAGS = 
XGLXMODULES_LIBS = 
XGLX_LIBS = 
XGL_LIBS = 
XGL_MODULE_PATH = 
XKB_BASE_DIRECTORY = /usr/local/share/X11/xkb
XKB_BIN_DIRECTORY = /usr/local/bin
XKB_COMPILED_DIR = /usr/local/share/X11/xkb/compiled
XKM_OUTPUT_DIR = /usr/local/share/X11/xkb/compiled/
XLIB_CFLAGS = 
XLIB_LIBS = 
XNESTMODULES_CFLAGS = -I/usr/include/freetype2  
XNESTMODULES_LIBS = -lXfont -lXext -lX11 -lXau -lXdmcp  
XNEST_LIBS = $(top_builddir)/mi/libmi.la $(top_builddir)/config/libconfig.a -lXfont -lXau -lfontenc -lpixman-1 -lhal -ldbus-1 -lXdmcp    -lm  -lrt $(top_builddir)/fb/libfb.la $(top_builddir)/xfixes/libxfixes.la $(top_builddir)/Xext/libXext.la $(top_builddir)/dbe/libdbe.la $(top_builddir)/XTrap/libxtrap.la $(top_builddir)/record/librecord.la  $(top_builddir)/render/librender.la $(top_builddir)/randr/librandr.la $(top_builddir)/damageext/libdamageext.la $(top_builddir)/miext/damage/libdamage.la $(top_builddir)/miext/shadow/libshadow.la $(top_builddir)/Xi/libXi.la $(top_builddir)/xkb/libxkb.la $(top_builddir)/xkb/libxkbstubs.la $(top_builddir)/composite/libcomposite.la $(top_builddir)/dix/libxpstubs.la $(top_builddir)/os/libcwrapper.la $(top_builddir)/os/libos.la -lm  -lrt
XORGCFG_DEP_CFLAGS = 
XORGCFG_DEP_LIBS = 
XORGCONFIG_DEP_CFLAGS =  
XORGCONFIG_DEP_LIBS = -lxkbfile -lX11  
XORG_CFLAGS =  -DHAVE_XORG_CONFIG_H -DXF86PM  
XORG_CORE_LIBS = $(top_builddir)/dix/libdix.la $(top_builddir)/config/libconfig.a
XORG_INCS = -I$(top_srcdir)/hw/xfree86 -I$(top_srcdir)/hw/xfree86/include -I$(top_srcdir)/hw/xfree86/common -I$(top_srcdir)/hw/xfree86/os-support -I$(top_srcdir)/hw/xfree86/os-support/bus -I$(top_srcdir)/os
XORG_LIBS = $(top_builddir)/composite/libcomposite.la $(top_builddir)/mi/libmi.la $(top_builddir)/xfixes/libxfixes.la $(top_builddir)/Xext/libXextbuiltin.la  $(top_builddir)/render/librender.la $(top_builddir)/randr/librandr.la $(top_builddir)/damageext/libdamageext.la $(top_builddir)/miext/damage/libdamage.la $(top_builddir)/miext/shadow/libshadow.la $(top_builddir)/Xi/libXi.la $(top_builddir)/xkb/libxkb.la $(top_builddir)/dix/libxpstubs.la $(top_builddir)/os/libos.la -ldl  
XORG_MODULES_CFLAGS =  
XORG_MODULES_LIBS =  
XORG_OS = linux
XORG_OS_SUBDIR = linux
XPRINTPROTO_CFLAGS = 
XPRINTPROTO_LIBS = 
XPRINT_CFLAGS = 
XPRINT_LIBS = 
XRESEXAMPLES_DEP_CFLAGS = 
XRESEXAMPLES_DEP_LIBS = 
XSDL_INCS = 
XSDL_LIBS = 
XSERVERCFLAGS_CFLAGS = -D_BSD_SOURCE -DHAS_FCHOWN -DHAS_STICKY_DIR_BIT -DDBUS_API_SUBJECT_TO_CHANGE -I/usr/include/freetype2 -I/usr/include/pixman-1 -I/usr/include/hal -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include  
XSERVERCFLAGS_LIBS = -lXt -lX11 -lSM -lICE -lxkbfile -lXfont -lXau -lfontenc -lpixman-1 -lhal -ldbus-1 -lXdmcp  
XSERVERLIBS_CFLAGS = -DDBUS_API_SUBJECT_TO_CHANGE -I/usr/include/freetype2 -I/usr/include/pixman-1 -I/usr/include/hal -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include  
XSERVERLIBS_LIBS = -lXfont -lXau -lfontenc -lpixman-1 -lhal -ldbus-1 -lXdmcp  
XSERVER_LIBS = -lXfont -lXau -lfontenc -lpixman-1 -lhal -ldbus-1 -lXdmcp    -lm  -lrt
XTSTEXAMPLES_DEP_CFLAGS = 
XTSTEXAMPLES_DEP_LIBS = 
XVFB_LIBS = $(top_builddir)/fb/libfb.la $(top_builddir)/mi/libmi.la $(top_builddir)/xfixes/libxfixes.la $(top_builddir)/Xext/libXext.la $(top_builddir)/config/libconfig.a $(top_builddir)/dbe/libdbe.la $(top_builddir)/XTrap/libxtrap.la $(top_builddir)/record/librecord.la  $(top_builddir)/render/librender.la $(top_builddir)/randr/librandr.la $(top_builddir)/damageext/libdamageext.la $(top_builddir)/miext/damage/libdamage.la $(top_builddir)/miext/shadow/libshadow.la $(top_builddir)/Xi/libXi.la $(top_builddir)/xkb/libxkb.la $(top_builddir)/xkb/libxkbstubs.la $(top_builddir)/composite/libcomposite.la $(top_builddir)/dix/libxpstubs.la $(top_builddir)/os/libcwrapper.la $(top_builddir)/os/libos.la -lm  -lrt
XWINMODULES_CFLAGS = 
XWINMODULES_LIBS = 
XWIN_LIBS = $(top_builddir)/fb/libfb.la $(top_builddir)/mi/libmi.la $(top_builddir)/Xext/libXext.la $(top_builddir)/config/libconfig.a $(top_builddir)/Xi/libXi.la $(top_builddir)/xkb/libxkb.la $(top_builddir)/xkb/libxkbstubs.la $(top_builddir)/composite/libcomposite.la $(top_builddir)/damageext/libdamageext.la  $(top_builddir)/dix/libxpstubs.la $(top_builddir)/os/libos.la 
XWIN_SERVER_NAME = 
XWIN_SYSTEM_LIBS = 
YACC = bison -y
YFLAGS = 
__XCONFIGFILE__ = xorg.conf
abs_builddir = /tmp/tmpiQUR1i/xorg-server-1.4.1~git20080105/hw/darwin
abs_srcdir = /tmp/tmpiQUR1i/xorg-server-1.4.1~git20080105/hw/darwin
abs_top_builddir = /tmp/tmpiQUR1i/xorg-server-1.4.1~git20080105
abs_top_srcdir = /tmp/tmpiQUR1i/xorg-server-1.4.1~git20080105
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = g77
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
driverdir = ${exec_prefix}/lib/xorg/modules/drivers
dvidir = ${docdir}
exec_prefix = ${prefix}
extdir = ${prefix}/include/X11/extensions
ft_config = 
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /tmp/tmpiQUR1i/xorg-server-1.4.1~git20080105/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
logdir = ${prefix}/var/log
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
moduledir = ${exec_prefix}/lib/xorg/modules
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sdkdir = ${prefix}/include/xorg
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_builddir = ../..
top_srcdir = ../..
xglmoduledir = 
xpconfigdir = 
noinst_LIBRARIES = libdarwinShared.a
libdarwin_XINPUT_SRCS = darwinXinput.c
AM_CFLAGS =  -DHAVE_XORG_CONFIG_H -DXF86PM   -DHAVE_DIX_CONFIG_H -Wall -Wpointer-arith -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -fno-strict-aliasing -D_BSD_SOURCE -DHAS_FCHOWN -DHAS_STICKY_DIR_BIT -DDBUS_API_SUBJECT_TO_CHANGE -I/usr/include/freetype2 -I/usr/include/pixman-1 -I/usr/include/hal -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include   -I$(top_srcdir)/include -I$(top_builddir)/include -I$(top_srcdir)/Xext -I$(top_srcdir)/composite -I$(top_srcdir)/damageext -I$(top_srcdir)/xfixes -I$(top_srcdir)/Xi -I$(top_srcdir)/mi -I$(top_srcdir)/miext/shadow  -I$(top_srcdir)/miext/damage -I$(top_srcdir)/render -I$(top_srcdir)/randr -I$(top_srcdir)/fb
AM_CPPFLAGS =  -DHAVE_XORG_CONFIG_H -DXF86PM   -DHAVE_DIX_CONFIG_H -Wall -Wpointer-arith -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -fno-strict-aliasing -D_BSD_SOURCE -DHAS_FCHOWN -DHAS_STICKY_DIR_BIT -DDBUS_API_SUBJECT_TO_CHANGE -I/usr/include/freetype2 -I/usr/include/pixman-1 -I/usr/include/hal -I/usr/include/dbus-1.0 -I/usr/lib/dbus-1.0/include   -I$(top_srcdir)/include -I$(top_builddir)/include -I$(top_srcdir)/Xext -I$(top_srcdir)/composite -I$(top_srcdir)/damageext -I$(top_srcdir)/xfixes -I$(top_srcdir)/Xi -I$(top_srcdir)/mi -I$(top_srcdir)/miext/shadow  -I$(top_srcdir)/miext/damage -I$(top_srcdir)/render -I$(top_srcdir)/randr -I$(top_srcdir)/fb
INCLUDES = -I$(top_srcdir)/hw/xfree86 -I$(top_srcdir)/hw/xfree86/include -I$(top_srcdir)/hw/xfree86/common -I$(top_srcdir)/hw/xfree86/os-support -I$(top_srcdir)/hw/xfree86/os-support/bus -I$(top_srcdir)/os -I../../miext/rootless
#XQUARTZ_SUBDIRS = bundle quartz
SUBDIRS = \
	  iokit \
	  $(XQUARTZ_SUBDIRS) \
	  utils \
	  .

darwinappdir = ${exec_prefix}/bin/Applications/XDarwin.app
libdarwinShared_a_SOURCES = darwin.c \
			  darwinEvents.c \
			  darwinKeyboard.c \
			  $(darwin_XINPUT_SRCS) 

XDarwin_SOURCES = \
                  $(top_srcdir)/fb/fbcmap_mi.c \
                  $(top_srcdir)/mi/miinitext.c \
                  $(top_srcdir)/Xi/stubs.c

Xquartz_SOURCES = \
                  $(top_srcdir)/fb/fbcmap_mi.c \
                  $(top_srcdir)/mi/miinitext.c \
                  $(top_srcdir)/Xi/stubs.c \
                  apple/X11Application.m \
                  apple/X11Controller.m \
                  quartz/Preferences.m \
                  quartz/applewm.c \
                  quartz/keysym2ucs.c \
                  quartz/pseudoramiX.c \
                  quartz/quartz.c \
                  quartz/quartzAudio.c \
                  quartz/quartzCocoa.m \
                  quartz/quartzKeyboard.c \
                  quartz/quartzPasteboard.c \
                  quartz/quartzStartup.c \
                  quartz/xpr/appledri.c \
                  quartz/xpr/dri.c \
                  quartz/xpr/xprAppleWM.c \
                  quartz/xpr/xprCursor.c \
                  quartz/xpr/xprFrame.c \
                  quartz/xpr/xprScreen.c \
                  quartz/xpr/x-hash.c \
                  quartz/xpr/x-hook.c \
                  quartz/xpr/x-list.c

XDarwin_LDADD = \
		$(top_builddir)/dix/dixfonts.lo \
		$(top_builddir)/dix/libdix.la \
		$(top_builddir)/config/libconfig.a \
		./libdarwinShared.a \
		./iokit/libiokit.a \
		$(top_builddir)/miext/shadow/libshadow.la \
		$(top_builddir)/miext/cw/libcw.la \
		$(DARWIN_LIBS) \
		$(top_builddir)/miext/rootless/librootless.la \
		$(top_builddir)/miext/rootless/safeAlpha/libsafeAlpha.la \
		$(top_builddir)/miext/rootless/accel/librlAccel.la \
		$(top_builddir)/composite/libcomposite.la $(top_builddir)/mi/libmi.la $(top_builddir)/xfixes/libxfixes.la $(top_builddir)/Xext/libXextbuiltin.la  $(top_builddir)/render/librender.la $(top_builddir)/randr/librandr.la $(top_builddir)/damageext/libdamageext.la $(top_builddir)/miext/damage/libdamage.la $(top_builddir)/miext/shadow/libshadow.la $(top_builddir)/Xi/libXi.la $(top_builddir)/xkb/libxkb.la $(top_builddir)/dix/libxpstubs.la $(top_builddir)/os/libos.la -ldl   \
		$(XSERVER_LIBS)

Xquartz_LDADD = \
		$(top_builddir)/dix/dixfonts.lo \
		$(top_builddir)/dix/libdix.la \
		$(top_builddir)/config/libconfig.a \
		./libdarwinShared.a \
		$(top_builddir)/miext/shadow/libshadow.la \
		$(top_builddir)/miext/cw/libcw.la \
		$(DARWIN_LIBS) \
		$(top_builddir)/miext/rootless/librootless.la \
		$(top_builddir)/miext/rootless/safeAlpha/libsafeAlpha.la \
		$(top_builddir)/miext/rootless/accel/librlAccel.la \
		$(top_builddir)/composite/libcomposite.la $(top_builddir)/mi/libmi.la $(top_builddir)/xfixes/libxfixes.la $(top_builddir)/Xext/libXextbuiltin.la  $(top_builddir)/render/librender.la $(top_builddir)/randr/librandr.la $(top_builddir)/damageext/libdamageext.la $(top_builddir)/miext/damage/libdamage.la $(top_builddir)/miext/shadow/libshadow.la $(top_builddir)/Xi/libXi.la $(top_builddir)/xkb/libxkb.la $(top_builddir)/dix/libxpstubs.la $(top_builddir)/os/libos.la -ldl   \
		$(XSERVER_LIBS) -lXplugin

XDarwin_LDFLAGS = \
                 -XCClinker -Objc \
                 -Wl,-u,_miDCInitialize \
                 -Wl,-framework,IOKit

Xquartz_LDFLAGS = \
                 -XCClinker -Objc \
                 -Wl,-u,_miDCInitialize \
                 -Wl,-framework,Carbon \
                 -Wl,-framework,OpenGL \
                 -Wl,-framework,Cocoa \
                 -Wl,-framework,CoreAudio \
                 -Wl,-framework,IOKit

XDarwin_CFLAGS = -DINXDARWIN
Xquartz_CFLAGS = -DINXQUARTZ -DHAS_CG_MACH_PORT -DHAS_KL_API  -DHAVE_XORG_CONFIG_H
#macosdir = $(darwinappdir)/Contents/MacOS
#macos_SCRIPTS = x11app
#XDarwinApp_SOURCES = \
#                $(top_srcdir)/fb/fbcmap_mi.c \
#                $(top_srcdir)/mi/miinitext.c \
#		$(top_srcdir)/Xi/stubs.c 

#XDarwinApp_LDADD = \
#		$(top_builddir)/dix/dixfonts.lo \
#		$(top_builddir)/dix/libdix.la \
#		$(top_builddir)/config/libconfig.a \
#		$(top_builddir)/os/libos.la \
#		./quartz/XApplication.o \
#		./libdarwinShared.a \
#		./quartz/libXQuartz.a \
#		 $(top_builddir)/miext/shadow/libshadow.la \
#		 $(top_builddir)/miext/cw/libcw.la \
#		 $(DARWIN_LIBS) \
#		 $(top_builddir)/miext/rootless/librootless.la \
#		 $(top_builddir)/miext/rootless/safeAlpha/libsafeAlpha.la \
#		 $(top_builddir)/miext/rootless/accel/librlAccel.la \
#		 $(top_builddir)/composite/libcomposite.la $(top_builddir)/mi/libmi.la $(top_builddir)/xfixes/libxfixes.la $(top_builddir)/Xext/libXextbuiltin.la  $(top_builddir)/render/librender.la $(top_builddir)/randr/librandr.la $(top_builddir)/damageext/libdamageext.la $(top_builddir)/miext/damage/libdamage.la $(top_builddir)/miext/shadow/libshadow.la $(top_builddir)/Xi/libXi.la $(top_builddir)/xkb/libxkb.la $(top_builddir)/dix/libxpstubs.la $(top_builddir)/os/libos.la -ldl   \
#		 $(XSERVER_LIBS)

#XDarwinApp_LDFLAGS = \
#		 -XCClinker -Objc \
#		 -Wl,-u,_miDCInitialize \
#		 -Wl,-framework,Carbon \
#		 -Wl,-framework,ApplicationServices \
#		 -Wl,-framework,Cocoa \
#		 -Wl,-framework,CoreAudio \
#		 -Wl,-framework,IOKit

#XDarwinApp_CFLAGS = -DINXDARWINAPP
#HOOK_TARGETS = xquartz-install-hook
#crplugindir = $(darwinappdir)/Contents/Resources/cr.bundle/Contents/MacOS
#crplugin_LTLIBRARIES = cr.la
#cr_la_SOURCES = \
#		quartz/cr/crAppleWM.m \
#		quartz/cr/crFrame.m \
#		quartz/cr/crScreen.m \
#		quartz/fullscreen/quartzCursor.c \
#		quartz/cr/XView.m

#cr_la_LIBADD = \
#		$(top_builddir)/miext/rootless/librootless.la \
#		$(top_builddir)/miext/rootless/safeAlpha/libsafeAlpha.la \
#		$(top_builddir)/miext/rootless/accel/librlAccel.la

#cr_la_LDFLAGS = -shrext '' -Wl,-framework,ApplicationServices \
#		-Wl,-framework,Cocoa \
#		-Wl,-framework,Carbon \
#		-XCClinker -ObjC \
#		-XCClinker -bundle_loader -XCClinker XDarwinApp \
#		-module -avoid-version -no-undefined

#cr_la_DEPENDENCIES = XDarwinApp	
#fullscreenplugindir = $(darwinappdir)/Contents/Resources/fullscreen.bundle/Contents/MacOS
#fullscreenplugin_LTLIBRARIES = fullscreen.la
#fullscreen_la_SOURCES = \
#		quartz/fullscreen/fullscreen.c \
#		quartz/fullscreen/quartzCursor.c

#fullscreen_la_LIBADD = \
#		$(top_builddir)/miext/shadow/libshadow.la

#fullscreen_la_LDFLAGS = -shrext '' -Wl,-framework,ApplicationServices \
#		-XCClinker -bundle_loader -XCClinker XDarwinApp \
#		-module -avoid-version -no-undefined

#fullscreen_la_DEPENDENCIES = XDarwinApp	
##glxMesaplugindir = $(darwinappdir)/Contents/Resources/glxMesa.bundle/Contents/MacOS
##glxMesaplugin_LTLIBRARIES = glxMesa.la
##glxMesa_la_SOURCES = 
##glxMesa_la_LIBADD = \
##		$(top_builddir)/GL/glx/libglx.la \
##		$(top_builddir)/GL/mesa/libGLcore.la 

##glxMesa_la_LDFLAGS = -shrext '' \
##		-Wl,-framework,AGL \
##		-Wl,-framework,OpenGL \
##		-XCClinker -ObjC \
##		-XCClinker -bundle_loader -XCClinker XDarwinApp \
##		-module -avoid-version -no-undefined

##glxMesa_la_DEPENDENCIES = XDarwinApp	
#xprplugindir = $(darwinappdir)/Contents/Resources/xpr.bundle/Contents/MacOS
#xprplugin_LTLIBRARIES = xpr.la
#xpr_la_SOURCES = \
#		quartz/xpr/appledri.c \
#		quartz/xpr/dri.c \
#		quartz/xpr/xprAppleWM.c \
#		quartz/xpr/xprCursor.c \
#		quartz/xpr/xprFrame.c \
#		quartz/xpr/xprScreen.c \
#		quartz/xpr/x-hash.c \
#		quartz/xpr/x-hook.c \
#		quartz/xpr/x-list.c

#xpr_la_LIBADD = \
#		$(top_builddir)/miext/rootless/librootless.la \
#		$(top_builddir)/miext/rootless/safeAlpha/libsafeAlpha.la \
#		$(top_builddir)/miext/rootless/accel/librlAccel.la

#xpr_la_LDFLAGS = -shrext '' -Wl,-framework,ApplicationServices \
#		-lXplugin \
#		-XCClinker -bundle_loader -XCClinker XDarwinApp \
#		-module -avoid-version -no-undefined

#xpr_la_DEPENDENCIES = XDarwinApp	
#glxCGLplugindir = $(darwinappdir)/Contents/Resources/glxCGL.bundle/Contents/MacOS
#glxCGLplugin_LTLIBRARIES = glxCGL.la
#glxCGL_la_SOURCES = 
#glxCGL_la_LIBADD = \
#		$(top_builddir)/GL/glx/glxext.o \
#		$(top_builddir)/GL/glx/libglx.a \
#		$(top_builddir)/GL/apple/libAGLcore.a

#glxCGL_la_LDFLAGS = -shrext '' -Wl,-framework,ApplicationServices \
#		-Wl,-framework,AGL \
#		-Wl,-framework,OpenGL \
#		-XCClinker -ObjC \
#		-XCClinker -bundle_loader -XCClinker XDarwinApp \
#		-module -avoid-version -no-undefined

#glxCGL_la_DEPENDENCIES = XDarwinApp	
#glxAGLplugindir = $(darwinappdir)/Contents/Resources/glxAGL.bundle/Contents/MacOS
#glxAGLplugin_LTLIBRARIES = glxAGL.la
#glxAGL_la_SOURCES = 
#glxAGL_la_LIBADD = \
#		$(top_builddir)/GL/glx/glxext.o \
#		$(top_builddir)/GL/glx/libglx.a \
#		$(top_builddir)/GL/apple/libAGLcore.a

#glxAGL_la_LDFLAGS = -shrext '' \
#		-Wl,-framework,AGL \
#		-Wl,-framework,OpenGL \
#		-XCClinker -ObjC \
#		-XCClinker -bundle_loader -XCClinker XDarwinApp \
#		-module -avoid-version -no-undefined

#glxAGL_la_DEPENDENCIES = XDarwinApp	
man1_MANS = XDarwin.man
EXTRA_DIST = \
	darwin.c \
	darwinClut8.h \
	darwinEvents.c \
	darwin.h \
	darwinKeyboard.c \
	darwinKeyboard.h \
	darwinXinput.c \
	XDarwin.man

all: all-recursive

.SUFFIXES:
.SUFFIXES: .c .lo .m .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  hw/darwin/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  hw/darwin/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
libdarwinShared.a: $(libdarwinShared_a_OBJECTS) $(libdarwinShared_a_DEPENDENCIES) 
	-rm -f libdarwinShared.a
	$(libdarwinShared_a_AR) libdarwinShared.a $(libdarwinShared_a_OBJECTS) $(libdarwinShared_a_LIBADD)
	$(RANLIB) libdarwinShared.a
install-crpluginLTLIBRARIES: $(crplugin_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(crplugindir)" || $(MKDIR_P) "$(DESTDIR)$(crplugindir)"
	@list='$(crplugin_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) --mode=install $(crpluginLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(crplugindir)/$$f'"; \
	    $(LIBTOOL) --mode=install $(crpluginLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(crplugindir)/$$f"; \
	  else :; fi; \
	done

uninstall-crpluginLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(crplugin_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) --mode=uninstall rm -f '$(DESTDIR)$(crplugindir)/$$p'"; \
	  $(LIBTOOL) --mode=uninstall rm -f "$(DESTDIR)$(crplugindir)/$$p"; \
	done

clean-crpluginLTLIBRARIES:
	-test -z "$(crplugin_LTLIBRARIES)" || rm -f $(crplugin_LTLIBRARIES)
	@list='$(crplugin_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
install-fullscreenpluginLTLIBRARIES: $(fullscreenplugin_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(fullscreenplugindir)" || $(MKDIR_P) "$(DESTDIR)$(fullscreenplugindir)"
	@list='$(fullscreenplugin_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) --mode=install $(fullscreenpluginLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(fullscreenplugindir)/$$f'"; \
	    $(LIBTOOL) --mode=install $(fullscreenpluginLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(fullscreenplugindir)/$$f"; \
	  else :; fi; \
	done

uninstall-fullscreenpluginLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(fullscreenplugin_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) --mode=uninstall rm -f '$(DESTDIR)$(fullscreenplugindir)/$$p'"; \
	  $(LIBTOOL) --mode=uninstall rm -f "$(DESTDIR)$(fullscreenplugindir)/$$p"; \
	done

clean-fullscreenpluginLTLIBRARIES:
	-test -z "$(fullscreenplugin_LTLIBRARIES)" || rm -f $(fullscreenplugin_LTLIBRARIES)
	@list='$(fullscreenplugin_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
install-glxAGLpluginLTLIBRARIES: $(glxAGLplugin_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(glxAGLplugindir)" || $(MKDIR_P) "$(DESTDIR)$(glxAGLplugindir)"
	@list='$(glxAGLplugin_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) --mode=install $(glxAGLpluginLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(glxAGLplugindir)/$$f'"; \
	    $(LIBTOOL) --mode=install $(glxAGLpluginLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(glxAGLplugindir)/$$f"; \
	  else :; fi; \
	done

uninstall-glxAGLpluginLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(glxAGLplugin_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) --mode=uninstall rm -f '$(DESTDIR)$(glxAGLplugindir)/$$p'"; \
	  $(LIBTOOL) --mode=uninstall rm -f "$(DESTDIR)$(glxAGLplugindir)/$$p"; \
	done

clean-glxAGLpluginLTLIBRARIES:
	-test -z "$(glxAGLplugin_LTLIBRARIES)" || rm -f $(glxAGLplugin_LTLIBRARIES)
	@list='$(glxAGLplugin_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
install-glxCGLpluginLTLIBRARIES: $(glxCGLplugin_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(glxCGLplugindir)" || $(MKDIR_P) "$(DESTDIR)$(glxCGLplugindir)"
	@list='$(glxCGLplugin_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) --mode=install $(glxCGLpluginLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(glxCGLplugindir)/$$f'"; \
	    $(LIBTOOL) --mode=install $(glxCGLpluginLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(glxCGLplugindir)/$$f"; \
	  else :; fi; \
	done

uninstall-glxCGLpluginLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(glxCGLplugin_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) --mode=uninstall rm -f '$(DESTDIR)$(glxCGLplugindir)/$$p'"; \
	  $(LIBTOOL) --mode=uninstall rm -f "$(DESTDIR)$(glxCGLplugindir)/$$p"; \
	done

clean-glxCGLpluginLTLIBRARIES:
	-test -z "$(glxCGLplugin_LTLIBRARIES)" || rm -f $(glxCGLplugin_LTLIBRARIES)
	@list='$(glxCGLplugin_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
install-glxMesapluginLTLIBRARIES: $(glxMesaplugin_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(glxMesaplugindir)" || $(MKDIR_P) "$(DESTDIR)$(glxMesaplugindir)"
	@list='$(glxMesaplugin_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) --mode=install $(glxMesapluginLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(glxMesaplugindir)/$$f'"; \
	    $(LIBTOOL) --mode=install $(glxMesapluginLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(glxMesaplugindir)/$$f"; \
	  else :; fi; \
	done

uninstall-glxMesapluginLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(glxMesaplugin_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) --mode=uninstall rm -f '$(DESTDIR)$(glxMesaplugindir)/$$p'"; \
	  $(LIBTOOL) --mode=uninstall rm -f "$(DESTDIR)$(glxMesaplugindir)/$$p"; \
	done

clean-glxMesapluginLTLIBRARIES:
	-test -z "$(glxMesaplugin_LTLIBRARIES)" || rm -f $(glxMesaplugin_LTLIBRARIES)
	@list='$(glxMesaplugin_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
install-xprpluginLTLIBRARIES: $(xprplugin_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(xprplugindir)" || $(MKDIR_P) "$(DESTDIR)$(xprplugindir)"
	@list='$(xprplugin_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(LIBTOOL) --mode=install $(xprpluginLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) '$$p' '$(DESTDIR)$(xprplugindir)/$$f'"; \
	    $(LIBTOOL) --mode=install $(xprpluginLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) "$$p" "$(DESTDIR)$(xprplugindir)/$$f"; \
	  else :; fi; \
	done

uninstall-xprpluginLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(xprplugin_LTLIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " $(LIBTOOL) --mode=uninstall rm -f '$(DESTDIR)$(xprplugindir)/$$p'"; \
	  $(LIBTOOL) --mode=uninstall rm -f "$(DESTDIR)$(xprplugindir)/$$p"; \
	done

clean-xprpluginLTLIBRARIES:
	-test -z "$(xprplugin_LTLIBRARIES)" || rm -f $(xprplugin_LTLIBRARIES)
	@list='$(xprplugin_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
cr.la: $(cr_la_OBJECTS) $(cr_la_DEPENDENCIES) 
	$(cr_la_LINK) $(am_cr_la_rpath) $(cr_la_OBJECTS) $(cr_la_LIBADD) $(LIBS)
fullscreen.la: $(fullscreen_la_OBJECTS) $(fullscreen_la_DEPENDENCIES) 
	$(fullscreen_la_LINK) $(am_fullscreen_la_rpath) $(fullscreen_la_OBJECTS) $(fullscreen_la_LIBADD) $(LIBS)
glxAGL.la: $(glxAGL_la_OBJECTS) $(glxAGL_la_DEPENDENCIES) 
	$(glxAGL_la_LINK) $(am_glxAGL_la_rpath) $(glxAGL_la_OBJECTS) $(glxAGL_la_LIBADD) $(LIBS)
glxCGL.la: $(glxCGL_la_OBJECTS) $(glxCGL_la_DEPENDENCIES) 
	$(glxCGL_la_LINK) $(am_glxCGL_la_rpath) $(glxCGL_la_OBJECTS) $(glxCGL_la_LIBADD) $(LIBS)
glxMesa.la: $(glxMesa_la_OBJECTS) $(glxMesa_la_DEPENDENCIES) 
	$(glxMesa_la_LINK) $(am_glxMesa_la_rpath) $(glxMesa_la_OBJECTS) $(glxMesa_la_LIBADD) $(LIBS)
xpr.la: $(xpr_la_OBJECTS) $(xpr_la_DEPENDENCIES) 
	$(xpr_la_LINK) $(am_xpr_la_rpath) $(xpr_la_OBJECTS) $(xpr_la_LIBADD) $(LIBS)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
install-macosPROGRAMS: $(macos_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(macosdir)" || $(MKDIR_P) "$(DESTDIR)$(macosdir)"
	@list='$(macos_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(macosPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(macosdir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(macosPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(macosdir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-macosPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(macos_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(macosdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(macosdir)/$$f"; \
	done

clean-macosPROGRAMS:
	@list='$(macos_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
XDarwin$(EXEEXT): $(XDarwin_OBJECTS) $(XDarwin_DEPENDENCIES) 
	@rm -f XDarwin$(EXEEXT)
	$(XDarwin_LINK) $(XDarwin_OBJECTS) $(XDarwin_LDADD) $(LIBS)
XDarwinApp$(EXEEXT): $(XDarwinApp_OBJECTS) $(XDarwinApp_DEPENDENCIES) 
	@rm -f XDarwinApp$(EXEEXT)
	$(XDarwinApp_LINK) $(XDarwinApp_OBJECTS) $(XDarwinApp_LDADD) $(LIBS)
Xquartz$(EXEEXT): $(Xquartz_OBJECTS) $(Xquartz_DEPENDENCIES) 
	@rm -f Xquartz$(EXEEXT)
	$(Xquartz_LINK) $(Xquartz_OBJECTS) $(Xquartz_LDADD) $(LIBS)
install-macosSCRIPTS: $(macos_SCRIPTS)
	@$(NORMAL_INSTALL)
	test -z "$(macosdir)" || $(MKDIR_P) "$(DESTDIR)$(macosdir)"
	@list='$(macos_SCRIPTS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f $$d$$p; then \
	    f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	    echo " $(macosSCRIPT_INSTALL) '$$d$$p' '$(DESTDIR)$(macosdir)/$$f'"; \
	    $(macosSCRIPT_INSTALL) "$$d$$p" "$(DESTDIR)$(macosdir)/$$f"; \
	  else :; fi; \
	done

uninstall-macosSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(macos_SCRIPTS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	  echo " rm -f '$(DESTDIR)$(macosdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(macosdir)/$$f"; \
	done

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/Preferences.Po
include ./$(DEPDIR)/X11Application.Po
include ./$(DEPDIR)/X11Controller.Po
include ./$(DEPDIR)/XDarwin-fbcmap_mi.Po
include ./$(DEPDIR)/XDarwin-miinitext.Po
include ./$(DEPDIR)/XDarwin-stubs.Po
include ./$(DEPDIR)/XDarwinApp-fbcmap_mi.Po
include ./$(DEPDIR)/XDarwinApp-miinitext.Po
include ./$(DEPDIR)/XDarwinApp-stubs.Po
include ./$(DEPDIR)/XView.Plo
include ./$(DEPDIR)/Xquartz-appledri.Po
include ./$(DEPDIR)/Xquartz-applewm.Po
include ./$(DEPDIR)/Xquartz-dri.Po
include ./$(DEPDIR)/Xquartz-fbcmap_mi.Po
include ./$(DEPDIR)/Xquartz-keysym2ucs.Po
include ./$(DEPDIR)/Xquartz-miinitext.Po
include ./$(DEPDIR)/Xquartz-pseudoramiX.Po
include ./$(DEPDIR)/Xquartz-quartz.Po
include ./$(DEPDIR)/Xquartz-quartzAudio.Po
include ./$(DEPDIR)/Xquartz-quartzKeyboard.Po
include ./$(DEPDIR)/Xquartz-quartzPasteboard.Po
include ./$(DEPDIR)/Xquartz-quartzStartup.Po
include ./$(DEPDIR)/Xquartz-stubs.Po
include ./$(DEPDIR)/Xquartz-x-hash.Po
include ./$(DEPDIR)/Xquartz-x-hook.Po
include ./$(DEPDIR)/Xquartz-x-list.Po
include ./$(DEPDIR)/Xquartz-xprAppleWM.Po
include ./$(DEPDIR)/Xquartz-xprCursor.Po
include ./$(DEPDIR)/Xquartz-xprFrame.Po
include ./$(DEPDIR)/Xquartz-xprScreen.Po
include ./$(DEPDIR)/appledri.Plo
include ./$(DEPDIR)/crAppleWM.Plo
include ./$(DEPDIR)/crFrame.Plo
include ./$(DEPDIR)/crScreen.Plo
include ./$(DEPDIR)/darwin.Po
include ./$(DEPDIR)/darwinEvents.Po
include ./$(DEPDIR)/darwinKeyboard.Po
include ./$(DEPDIR)/dri.Plo
include ./$(DEPDIR)/fullscreen.Plo
include ./$(DEPDIR)/quartzCocoa.Po
include ./$(DEPDIR)/quartzCursor.Plo
include ./$(DEPDIR)/x-hash.Plo
include ./$(DEPDIR)/x-hook.Plo
include ./$(DEPDIR)/x-list.Plo
include ./$(DEPDIR)/xprAppleWM.Plo
include ./$(DEPDIR)/xprCursor.Plo
include ./$(DEPDIR)/xprFrame.Plo
include ./$(DEPDIR)/xprScreen.Plo

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

quartzCursor.lo: quartz/fullscreen/quartzCursor.c
	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT quartzCursor.lo -MD -MP -MF $(DEPDIR)/quartzCursor.Tpo -c -o quartzCursor.lo `test -f 'quartz/fullscreen/quartzCursor.c' || echo '$(srcdir)/'`quartz/fullscreen/quartzCursor.c
	mv -f $(DEPDIR)/quartzCursor.Tpo $(DEPDIR)/quartzCursor.Plo
#	source='quartz/fullscreen/quartzCursor.c' object='quartzCursor.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o quartzCursor.lo `test -f 'quartz/fullscreen/quartzCursor.c' || echo '$(srcdir)/'`quartz/fullscreen/quartzCursor.c

fullscreen.lo: quartz/fullscreen/fullscreen.c
	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT fullscreen.lo -MD -MP -MF $(DEPDIR)/fullscreen.Tpo -c -o fullscreen.lo `test -f 'quartz/fullscreen/fullscreen.c' || echo '$(srcdir)/'`quartz/fullscreen/fullscreen.c
	mv -f $(DEPDIR)/fullscreen.Tpo $(DEPDIR)/fullscreen.Plo
#	source='quartz/fullscreen/fullscreen.c' object='fullscreen.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o fullscreen.lo `test -f 'quartz/fullscreen/fullscreen.c' || echo '$(srcdir)/'`quartz/fullscreen/fullscreen.c

appledri.lo: quartz/xpr/appledri.c
	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT appledri.lo -MD -MP -MF $(DEPDIR)/appledri.Tpo -c -o appledri.lo `test -f 'quartz/xpr/appledri.c' || echo '$(srcdir)/'`quartz/xpr/appledri.c
	mv -f $(DEPDIR)/appledri.Tpo $(DEPDIR)/appledri.Plo
#	source='quartz/xpr/appledri.c' object='appledri.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o appledri.lo `test -f 'quartz/xpr/appledri.c' || echo '$(srcdir)/'`quartz/xpr/appledri.c

dri.lo: quartz/xpr/dri.c
	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT dri.lo -MD -MP -MF $(DEPDIR)/dri.Tpo -c -o dri.lo `test -f 'quartz/xpr/dri.c' || echo '$(srcdir)/'`quartz/xpr/dri.c
	mv -f $(DEPDIR)/dri.Tpo $(DEPDIR)/dri.Plo
#	source='quartz/xpr/dri.c' object='dri.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o dri.lo `test -f 'quartz/xpr/dri.c' || echo '$(srcdir)/'`quartz/xpr/dri.c

xprAppleWM.lo: quartz/xpr/xprAppleWM.c
	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT xprAppleWM.lo -MD -MP -MF $(DEPDIR)/xprAppleWM.Tpo -c -o xprAppleWM.lo `test -f 'quartz/xpr/xprAppleWM.c' || echo '$(srcdir)/'`quartz/xpr/xprAppleWM.c
	mv -f $(DEPDIR)/xprAppleWM.Tpo $(DEPDIR)/xprAppleWM.Plo
#	source='quartz/xpr/xprAppleWM.c' object='xprAppleWM.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o xprAppleWM.lo `test -f 'quartz/xpr/xprAppleWM.c' || echo '$(srcdir)/'`quartz/xpr/xprAppleWM.c

xprCursor.lo: quartz/xpr/xprCursor.c
	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT xprCursor.lo -MD -MP -MF $(DEPDIR)/xprCursor.Tpo -c -o xprCursor.lo `test -f 'quartz/xpr/xprCursor.c' || echo '$(srcdir)/'`quartz/xpr/xprCursor.c
	mv -f $(DEPDIR)/xprCursor.Tpo $(DEPDIR)/xprCursor.Plo
#	source='quartz/xpr/xprCursor.c' object='xprCursor.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o xprCursor.lo `test -f 'quartz/xpr/xprCursor.c' || echo '$(srcdir)/'`quartz/xpr/xprCursor.c

xprFrame.lo: quartz/xpr/xprFrame.c
	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT xprFrame.lo -MD -MP -MF $(DEPDIR)/xprFrame.Tpo -c -o xprFrame.lo `test -f 'quartz/xpr/xprFrame.c' || echo '$(srcdir)/'`quartz/xpr/xprFrame.c
	mv -f $(DEPDIR)/xprFrame.Tpo $(DEPDIR)/xprFrame.Plo
#	source='quartz/xpr/xprFrame.c' object='xprFrame.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o xprFrame.lo `test -f 'quartz/xpr/xprFrame.c' || echo '$(srcdir)/'`quartz/xpr/xprFrame.c

xprScreen.lo: quartz/xpr/xprScreen.c
	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT xprScreen.lo -MD -MP -MF $(DEPDIR)/xprScreen.Tpo -c -o xprScreen.lo `test -f 'quartz/xpr/xprScreen.c' || echo '$(srcdir)/'`quartz/xpr/xprScreen.c
	mv -f $(DEPDIR)/xprScreen.Tpo $(DEPDIR)/xprScreen.Plo
#	source='quartz/xpr/xprScreen.c' object='xprScreen.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o xprScreen.lo `test -f 'quartz/xpr/xprScreen.c' || echo '$(srcdir)/'`quartz/xpr/xprScreen.c

x-hash.lo: quartz/xpr/x-hash.c
	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT x-hash.lo -MD -MP -MF $(DEPDIR)/x-hash.Tpo -c -o x-hash.lo `test -f 'quartz/xpr/x-hash.c' || echo '$(srcdir)/'`quartz/xpr/x-hash.c
	mv -f $(DEPDIR)/x-hash.Tpo $(DEPDIR)/x-hash.Plo
#	source='quartz/xpr/x-hash.c' object='x-hash.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o x-hash.lo `test -f 'quartz/xpr/x-hash.c' || echo '$(srcdir)/'`quartz/xpr/x-hash.c

x-hook.lo: quartz/xpr/x-hook.c
	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT x-hook.lo -MD -MP -MF $(DEPDIR)/x-hook.Tpo -c -o x-hook.lo `test -f 'quartz/xpr/x-hook.c' || echo '$(srcdir)/'`quartz/xpr/x-hook.c
	mv -f $(DEPDIR)/x-hook.Tpo $(DEPDIR)/x-hook.Plo
#	source='quartz/xpr/x-hook.c' object='x-hook.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o x-hook.lo `test -f 'quartz/xpr/x-hook.c' || echo '$(srcdir)/'`quartz/xpr/x-hook.c

x-list.lo: quartz/xpr/x-list.c
	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT x-list.lo -MD -MP -MF $(DEPDIR)/x-list.Tpo -c -o x-list.lo `test -f 'quartz/xpr/x-list.c' || echo '$(srcdir)/'`quartz/xpr/x-list.c
	mv -f $(DEPDIR)/x-list.Tpo $(DEPDIR)/x-list.Plo
#	source='quartz/xpr/x-list.c' object='x-list.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o x-list.lo `test -f 'quartz/xpr/x-list.c' || echo '$(srcdir)/'`quartz/xpr/x-list.c

XDarwin-fbcmap_mi.o: $(top_srcdir)/fb/fbcmap_mi.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwin_CFLAGS) $(CFLAGS) -MT XDarwin-fbcmap_mi.o -MD -MP -MF $(DEPDIR)/XDarwin-fbcmap_mi.Tpo -c -o XDarwin-fbcmap_mi.o `test -f '$(top_srcdir)/fb/fbcmap_mi.c' || echo '$(srcdir)/'`$(top_srcdir)/fb/fbcmap_mi.c
	mv -f $(DEPDIR)/XDarwin-fbcmap_mi.Tpo $(DEPDIR)/XDarwin-fbcmap_mi.Po
#	source='$(top_srcdir)/fb/fbcmap_mi.c' object='XDarwin-fbcmap_mi.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwin_CFLAGS) $(CFLAGS) -c -o XDarwin-fbcmap_mi.o `test -f '$(top_srcdir)/fb/fbcmap_mi.c' || echo '$(srcdir)/'`$(top_srcdir)/fb/fbcmap_mi.c

XDarwin-fbcmap_mi.obj: $(top_srcdir)/fb/fbcmap_mi.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwin_CFLAGS) $(CFLAGS) -MT XDarwin-fbcmap_mi.obj -MD -MP -MF $(DEPDIR)/XDarwin-fbcmap_mi.Tpo -c -o XDarwin-fbcmap_mi.obj `if test -f '$(top_srcdir)/fb/fbcmap_mi.c'; then $(CYGPATH_W) '$(top_srcdir)/fb/fbcmap_mi.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/fb/fbcmap_mi.c'; fi`
	mv -f $(DEPDIR)/XDarwin-fbcmap_mi.Tpo $(DEPDIR)/XDarwin-fbcmap_mi.Po
#	source='$(top_srcdir)/fb/fbcmap_mi.c' object='XDarwin-fbcmap_mi.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwin_CFLAGS) $(CFLAGS) -c -o XDarwin-fbcmap_mi.obj `if test -f '$(top_srcdir)/fb/fbcmap_mi.c'; then $(CYGPATH_W) '$(top_srcdir)/fb/fbcmap_mi.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/fb/fbcmap_mi.c'; fi`

XDarwin-miinitext.o: $(top_srcdir)/mi/miinitext.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwin_CFLAGS) $(CFLAGS) -MT XDarwin-miinitext.o -MD -MP -MF $(DEPDIR)/XDarwin-miinitext.Tpo -c -o XDarwin-miinitext.o `test -f '$(top_srcdir)/mi/miinitext.c' || echo '$(srcdir)/'`$(top_srcdir)/mi/miinitext.c
	mv -f $(DEPDIR)/XDarwin-miinitext.Tpo $(DEPDIR)/XDarwin-miinitext.Po
#	source='$(top_srcdir)/mi/miinitext.c' object='XDarwin-miinitext.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwin_CFLAGS) $(CFLAGS) -c -o XDarwin-miinitext.o `test -f '$(top_srcdir)/mi/miinitext.c' || echo '$(srcdir)/'`$(top_srcdir)/mi/miinitext.c

XDarwin-miinitext.obj: $(top_srcdir)/mi/miinitext.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwin_CFLAGS) $(CFLAGS) -MT XDarwin-miinitext.obj -MD -MP -MF $(DEPDIR)/XDarwin-miinitext.Tpo -c -o XDarwin-miinitext.obj `if test -f '$(top_srcdir)/mi/miinitext.c'; then $(CYGPATH_W) '$(top_srcdir)/mi/miinitext.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/mi/miinitext.c'; fi`
	mv -f $(DEPDIR)/XDarwin-miinitext.Tpo $(DEPDIR)/XDarwin-miinitext.Po
#	source='$(top_srcdir)/mi/miinitext.c' object='XDarwin-miinitext.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwin_CFLAGS) $(CFLAGS) -c -o XDarwin-miinitext.obj `if test -f '$(top_srcdir)/mi/miinitext.c'; then $(CYGPATH_W) '$(top_srcdir)/mi/miinitext.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/mi/miinitext.c'; fi`

XDarwin-stubs.o: $(top_srcdir)/Xi/stubs.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwin_CFLAGS) $(CFLAGS) -MT XDarwin-stubs.o -MD -MP -MF $(DEPDIR)/XDarwin-stubs.Tpo -c -o XDarwin-stubs.o `test -f '$(top_srcdir)/Xi/stubs.c' || echo '$(srcdir)/'`$(top_srcdir)/Xi/stubs.c
	mv -f $(DEPDIR)/XDarwin-stubs.Tpo $(DEPDIR)/XDarwin-stubs.Po
#	source='$(top_srcdir)/Xi/stubs.c' object='XDarwin-stubs.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwin_CFLAGS) $(CFLAGS) -c -o XDarwin-stubs.o `test -f '$(top_srcdir)/Xi/stubs.c' || echo '$(srcdir)/'`$(top_srcdir)/Xi/stubs.c

XDarwin-stubs.obj: $(top_srcdir)/Xi/stubs.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwin_CFLAGS) $(CFLAGS) -MT XDarwin-stubs.obj -MD -MP -MF $(DEPDIR)/XDarwin-stubs.Tpo -c -o XDarwin-stubs.obj `if test -f '$(top_srcdir)/Xi/stubs.c'; then $(CYGPATH_W) '$(top_srcdir)/Xi/stubs.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/Xi/stubs.c'; fi`
	mv -f $(DEPDIR)/XDarwin-stubs.Tpo $(DEPDIR)/XDarwin-stubs.Po
#	source='$(top_srcdir)/Xi/stubs.c' object='XDarwin-stubs.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwin_CFLAGS) $(CFLAGS) -c -o XDarwin-stubs.obj `if test -f '$(top_srcdir)/Xi/stubs.c'; then $(CYGPATH_W) '$(top_srcdir)/Xi/stubs.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/Xi/stubs.c'; fi`

XDarwinApp-fbcmap_mi.o: $(top_srcdir)/fb/fbcmap_mi.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwinApp_CFLAGS) $(CFLAGS) -MT XDarwinApp-fbcmap_mi.o -MD -MP -MF $(DEPDIR)/XDarwinApp-fbcmap_mi.Tpo -c -o XDarwinApp-fbcmap_mi.o `test -f '$(top_srcdir)/fb/fbcmap_mi.c' || echo '$(srcdir)/'`$(top_srcdir)/fb/fbcmap_mi.c
	mv -f $(DEPDIR)/XDarwinApp-fbcmap_mi.Tpo $(DEPDIR)/XDarwinApp-fbcmap_mi.Po
#	source='$(top_srcdir)/fb/fbcmap_mi.c' object='XDarwinApp-fbcmap_mi.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwinApp_CFLAGS) $(CFLAGS) -c -o XDarwinApp-fbcmap_mi.o `test -f '$(top_srcdir)/fb/fbcmap_mi.c' || echo '$(srcdir)/'`$(top_srcdir)/fb/fbcmap_mi.c

XDarwinApp-fbcmap_mi.obj: $(top_srcdir)/fb/fbcmap_mi.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwinApp_CFLAGS) $(CFLAGS) -MT XDarwinApp-fbcmap_mi.obj -MD -MP -MF $(DEPDIR)/XDarwinApp-fbcmap_mi.Tpo -c -o XDarwinApp-fbcmap_mi.obj `if test -f '$(top_srcdir)/fb/fbcmap_mi.c'; then $(CYGPATH_W) '$(top_srcdir)/fb/fbcmap_mi.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/fb/fbcmap_mi.c'; fi`
	mv -f $(DEPDIR)/XDarwinApp-fbcmap_mi.Tpo $(DEPDIR)/XDarwinApp-fbcmap_mi.Po
#	source='$(top_srcdir)/fb/fbcmap_mi.c' object='XDarwinApp-fbcmap_mi.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwinApp_CFLAGS) $(CFLAGS) -c -o XDarwinApp-fbcmap_mi.obj `if test -f '$(top_srcdir)/fb/fbcmap_mi.c'; then $(CYGPATH_W) '$(top_srcdir)/fb/fbcmap_mi.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/fb/fbcmap_mi.c'; fi`

XDarwinApp-miinitext.o: $(top_srcdir)/mi/miinitext.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwinApp_CFLAGS) $(CFLAGS) -MT XDarwinApp-miinitext.o -MD -MP -MF $(DEPDIR)/XDarwinApp-miinitext.Tpo -c -o XDarwinApp-miinitext.o `test -f '$(top_srcdir)/mi/miinitext.c' || echo '$(srcdir)/'`$(top_srcdir)/mi/miinitext.c
	mv -f $(DEPDIR)/XDarwinApp-miinitext.Tpo $(DEPDIR)/XDarwinApp-miinitext.Po
#	source='$(top_srcdir)/mi/miinitext.c' object='XDarwinApp-miinitext.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwinApp_CFLAGS) $(CFLAGS) -c -o XDarwinApp-miinitext.o `test -f '$(top_srcdir)/mi/miinitext.c' || echo '$(srcdir)/'`$(top_srcdir)/mi/miinitext.c

XDarwinApp-miinitext.obj: $(top_srcdir)/mi/miinitext.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwinApp_CFLAGS) $(CFLAGS) -MT XDarwinApp-miinitext.obj -MD -MP -MF $(DEPDIR)/XDarwinApp-miinitext.Tpo -c -o XDarwinApp-miinitext.obj `if test -f '$(top_srcdir)/mi/miinitext.c'; then $(CYGPATH_W) '$(top_srcdir)/mi/miinitext.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/mi/miinitext.c'; fi`
	mv -f $(DEPDIR)/XDarwinApp-miinitext.Tpo $(DEPDIR)/XDarwinApp-miinitext.Po
#	source='$(top_srcdir)/mi/miinitext.c' object='XDarwinApp-miinitext.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwinApp_CFLAGS) $(CFLAGS) -c -o XDarwinApp-miinitext.obj `if test -f '$(top_srcdir)/mi/miinitext.c'; then $(CYGPATH_W) '$(top_srcdir)/mi/miinitext.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/mi/miinitext.c'; fi`

XDarwinApp-stubs.o: $(top_srcdir)/Xi/stubs.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwinApp_CFLAGS) $(CFLAGS) -MT XDarwinApp-stubs.o -MD -MP -MF $(DEPDIR)/XDarwinApp-stubs.Tpo -c -o XDarwinApp-stubs.o `test -f '$(top_srcdir)/Xi/stubs.c' || echo '$(srcdir)/'`$(top_srcdir)/Xi/stubs.c
	mv -f $(DEPDIR)/XDarwinApp-stubs.Tpo $(DEPDIR)/XDarwinApp-stubs.Po
#	source='$(top_srcdir)/Xi/stubs.c' object='XDarwinApp-stubs.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwinApp_CFLAGS) $(CFLAGS) -c -o XDarwinApp-stubs.o `test -f '$(top_srcdir)/Xi/stubs.c' || echo '$(srcdir)/'`$(top_srcdir)/Xi/stubs.c

XDarwinApp-stubs.obj: $(top_srcdir)/Xi/stubs.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwinApp_CFLAGS) $(CFLAGS) -MT XDarwinApp-stubs.obj -MD -MP -MF $(DEPDIR)/XDarwinApp-stubs.Tpo -c -o XDarwinApp-stubs.obj `if test -f '$(top_srcdir)/Xi/stubs.c'; then $(CYGPATH_W) '$(top_srcdir)/Xi/stubs.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/Xi/stubs.c'; fi`
	mv -f $(DEPDIR)/XDarwinApp-stubs.Tpo $(DEPDIR)/XDarwinApp-stubs.Po
#	source='$(top_srcdir)/Xi/stubs.c' object='XDarwinApp-stubs.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(XDarwinApp_CFLAGS) $(CFLAGS) -c -o XDarwinApp-stubs.obj `if test -f '$(top_srcdir)/Xi/stubs.c'; then $(CYGPATH_W) '$(top_srcdir)/Xi/stubs.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/Xi/stubs.c'; fi`

Xquartz-fbcmap_mi.o: $(top_srcdir)/fb/fbcmap_mi.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-fbcmap_mi.o -MD -MP -MF $(DEPDIR)/Xquartz-fbcmap_mi.Tpo -c -o Xquartz-fbcmap_mi.o `test -f '$(top_srcdir)/fb/fbcmap_mi.c' || echo '$(srcdir)/'`$(top_srcdir)/fb/fbcmap_mi.c
	mv -f $(DEPDIR)/Xquartz-fbcmap_mi.Tpo $(DEPDIR)/Xquartz-fbcmap_mi.Po
#	source='$(top_srcdir)/fb/fbcmap_mi.c' object='Xquartz-fbcmap_mi.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-fbcmap_mi.o `test -f '$(top_srcdir)/fb/fbcmap_mi.c' || echo '$(srcdir)/'`$(top_srcdir)/fb/fbcmap_mi.c

Xquartz-fbcmap_mi.obj: $(top_srcdir)/fb/fbcmap_mi.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-fbcmap_mi.obj -MD -MP -MF $(DEPDIR)/Xquartz-fbcmap_mi.Tpo -c -o Xquartz-fbcmap_mi.obj `if test -f '$(top_srcdir)/fb/fbcmap_mi.c'; then $(CYGPATH_W) '$(top_srcdir)/fb/fbcmap_mi.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/fb/fbcmap_mi.c'; fi`
	mv -f $(DEPDIR)/Xquartz-fbcmap_mi.Tpo $(DEPDIR)/Xquartz-fbcmap_mi.Po
#	source='$(top_srcdir)/fb/fbcmap_mi.c' object='Xquartz-fbcmap_mi.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-fbcmap_mi.obj `if test -f '$(top_srcdir)/fb/fbcmap_mi.c'; then $(CYGPATH_W) '$(top_srcdir)/fb/fbcmap_mi.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/fb/fbcmap_mi.c'; fi`

Xquartz-miinitext.o: $(top_srcdir)/mi/miinitext.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-miinitext.o -MD -MP -MF $(DEPDIR)/Xquartz-miinitext.Tpo -c -o Xquartz-miinitext.o `test -f '$(top_srcdir)/mi/miinitext.c' || echo '$(srcdir)/'`$(top_srcdir)/mi/miinitext.c
	mv -f $(DEPDIR)/Xquartz-miinitext.Tpo $(DEPDIR)/Xquartz-miinitext.Po
#	source='$(top_srcdir)/mi/miinitext.c' object='Xquartz-miinitext.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-miinitext.o `test -f '$(top_srcdir)/mi/miinitext.c' || echo '$(srcdir)/'`$(top_srcdir)/mi/miinitext.c

Xquartz-miinitext.obj: $(top_srcdir)/mi/miinitext.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-miinitext.obj -MD -MP -MF $(DEPDIR)/Xquartz-miinitext.Tpo -c -o Xquartz-miinitext.obj `if test -f '$(top_srcdir)/mi/miinitext.c'; then $(CYGPATH_W) '$(top_srcdir)/mi/miinitext.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/mi/miinitext.c'; fi`
	mv -f $(DEPDIR)/Xquartz-miinitext.Tpo $(DEPDIR)/Xquartz-miinitext.Po
#	source='$(top_srcdir)/mi/miinitext.c' object='Xquartz-miinitext.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-miinitext.obj `if test -f '$(top_srcdir)/mi/miinitext.c'; then $(CYGPATH_W) '$(top_srcdir)/mi/miinitext.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/mi/miinitext.c'; fi`

Xquartz-stubs.o: $(top_srcdir)/Xi/stubs.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-stubs.o -MD -MP -MF $(DEPDIR)/Xquartz-stubs.Tpo -c -o Xquartz-stubs.o `test -f '$(top_srcdir)/Xi/stubs.c' || echo '$(srcdir)/'`$(top_srcdir)/Xi/stubs.c
	mv -f $(DEPDIR)/Xquartz-stubs.Tpo $(DEPDIR)/Xquartz-stubs.Po
#	source='$(top_srcdir)/Xi/stubs.c' object='Xquartz-stubs.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-stubs.o `test -f '$(top_srcdir)/Xi/stubs.c' || echo '$(srcdir)/'`$(top_srcdir)/Xi/stubs.c

Xquartz-stubs.obj: $(top_srcdir)/Xi/stubs.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-stubs.obj -MD -MP -MF $(DEPDIR)/Xquartz-stubs.Tpo -c -o Xquartz-stubs.obj `if test -f '$(top_srcdir)/Xi/stubs.c'; then $(CYGPATH_W) '$(top_srcdir)/Xi/stubs.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/Xi/stubs.c'; fi`
	mv -f $(DEPDIR)/Xquartz-stubs.Tpo $(DEPDIR)/Xquartz-stubs.Po
#	source='$(top_srcdir)/Xi/stubs.c' object='Xquartz-stubs.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-stubs.obj `if test -f '$(top_srcdir)/Xi/stubs.c'; then $(CYGPATH_W) '$(top_srcdir)/Xi/stubs.c'; else $(CYGPATH_W) '$(srcdir)/$(top_srcdir)/Xi/stubs.c'; fi`

Xquartz-applewm.o: quartz/applewm.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-applewm.o -MD -MP -MF $(DEPDIR)/Xquartz-applewm.Tpo -c -o Xquartz-applewm.o `test -f 'quartz/applewm.c' || echo '$(srcdir)/'`quartz/applewm.c
	mv -f $(DEPDIR)/Xquartz-applewm.Tpo $(DEPDIR)/Xquartz-applewm.Po
#	source='quartz/applewm.c' object='Xquartz-applewm.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-applewm.o `test -f 'quartz/applewm.c' || echo '$(srcdir)/'`quartz/applewm.c

Xquartz-applewm.obj: quartz/applewm.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-applewm.obj -MD -MP -MF $(DEPDIR)/Xquartz-applewm.Tpo -c -o Xquartz-applewm.obj `if test -f 'quartz/applewm.c'; then $(CYGPATH_W) 'quartz/applewm.c'; else $(CYGPATH_W) '$(srcdir)/quartz/applewm.c'; fi`
	mv -f $(DEPDIR)/Xquartz-applewm.Tpo $(DEPDIR)/Xquartz-applewm.Po
#	source='quartz/applewm.c' object='Xquartz-applewm.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-applewm.obj `if test -f 'quartz/applewm.c'; then $(CYGPATH_W) 'quartz/applewm.c'; else $(CYGPATH_W) '$(srcdir)/quartz/applewm.c'; fi`

Xquartz-keysym2ucs.o: quartz/keysym2ucs.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-keysym2ucs.o -MD -MP -MF $(DEPDIR)/Xquartz-keysym2ucs.Tpo -c -o Xquartz-keysym2ucs.o `test -f 'quartz/keysym2ucs.c' || echo '$(srcdir)/'`quartz/keysym2ucs.c
	mv -f $(DEPDIR)/Xquartz-keysym2ucs.Tpo $(DEPDIR)/Xquartz-keysym2ucs.Po
#	source='quartz/keysym2ucs.c' object='Xquartz-keysym2ucs.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-keysym2ucs.o `test -f 'quartz/keysym2ucs.c' || echo '$(srcdir)/'`quartz/keysym2ucs.c

Xquartz-keysym2ucs.obj: quartz/keysym2ucs.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-keysym2ucs.obj -MD -MP -MF $(DEPDIR)/Xquartz-keysym2ucs.Tpo -c -o Xquartz-keysym2ucs.obj `if test -f 'quartz/keysym2ucs.c'; then $(CYGPATH_W) 'quartz/keysym2ucs.c'; else $(CYGPATH_W) '$(srcdir)/quartz/keysym2ucs.c'; fi`
	mv -f $(DEPDIR)/Xquartz-keysym2ucs.Tpo $(DEPDIR)/Xquartz-keysym2ucs.Po
#	source='quartz/keysym2ucs.c' object='Xquartz-keysym2ucs.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-keysym2ucs.obj `if test -f 'quartz/keysym2ucs.c'; then $(CYGPATH_W) 'quartz/keysym2ucs.c'; else $(CYGPATH_W) '$(srcdir)/quartz/keysym2ucs.c'; fi`

Xquartz-pseudoramiX.o: quartz/pseudoramiX.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-pseudoramiX.o -MD -MP -MF $(DEPDIR)/Xquartz-pseudoramiX.Tpo -c -o Xquartz-pseudoramiX.o `test -f 'quartz/pseudoramiX.c' || echo '$(srcdir)/'`quartz/pseudoramiX.c
	mv -f $(DEPDIR)/Xquartz-pseudoramiX.Tpo $(DEPDIR)/Xquartz-pseudoramiX.Po
#	source='quartz/pseudoramiX.c' object='Xquartz-pseudoramiX.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-pseudoramiX.o `test -f 'quartz/pseudoramiX.c' || echo '$(srcdir)/'`quartz/pseudoramiX.c

Xquartz-pseudoramiX.obj: quartz/pseudoramiX.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-pseudoramiX.obj -MD -MP -MF $(DEPDIR)/Xquartz-pseudoramiX.Tpo -c -o Xquartz-pseudoramiX.obj `if test -f 'quartz/pseudoramiX.c'; then $(CYGPATH_W) 'quartz/pseudoramiX.c'; else $(CYGPATH_W) '$(srcdir)/quartz/pseudoramiX.c'; fi`
	mv -f $(DEPDIR)/Xquartz-pseudoramiX.Tpo $(DEPDIR)/Xquartz-pseudoramiX.Po
#	source='quartz/pseudoramiX.c' object='Xquartz-pseudoramiX.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-pseudoramiX.obj `if test -f 'quartz/pseudoramiX.c'; then $(CYGPATH_W) 'quartz/pseudoramiX.c'; else $(CYGPATH_W) '$(srcdir)/quartz/pseudoramiX.c'; fi`

Xquartz-quartz.o: quartz/quartz.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-quartz.o -MD -MP -MF $(DEPDIR)/Xquartz-quartz.Tpo -c -o Xquartz-quartz.o `test -f 'quartz/quartz.c' || echo '$(srcdir)/'`quartz/quartz.c
	mv -f $(DEPDIR)/Xquartz-quartz.Tpo $(DEPDIR)/Xquartz-quartz.Po
#	source='quartz/quartz.c' object='Xquartz-quartz.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-quartz.o `test -f 'quartz/quartz.c' || echo '$(srcdir)/'`quartz/quartz.c

Xquartz-quartz.obj: quartz/quartz.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-quartz.obj -MD -MP -MF $(DEPDIR)/Xquartz-quartz.Tpo -c -o Xquartz-quartz.obj `if test -f 'quartz/quartz.c'; then $(CYGPATH_W) 'quartz/quartz.c'; else $(CYGPATH_W) '$(srcdir)/quartz/quartz.c'; fi`
	mv -f $(DEPDIR)/Xquartz-quartz.Tpo $(DEPDIR)/Xquartz-quartz.Po
#	source='quartz/quartz.c' object='Xquartz-quartz.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-quartz.obj `if test -f 'quartz/quartz.c'; then $(CYGPATH_W) 'quartz/quartz.c'; else $(CYGPATH_W) '$(srcdir)/quartz/quartz.c'; fi`

Xquartz-quartzAudio.o: quartz/quartzAudio.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-quartzAudio.o -MD -MP -MF $(DEPDIR)/Xquartz-quartzAudio.Tpo -c -o Xquartz-quartzAudio.o `test -f 'quartz/quartzAudio.c' || echo '$(srcdir)/'`quartz/quartzAudio.c
	mv -f $(DEPDIR)/Xquartz-quartzAudio.Tpo $(DEPDIR)/Xquartz-quartzAudio.Po
#	source='quartz/quartzAudio.c' object='Xquartz-quartzAudio.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-quartzAudio.o `test -f 'quartz/quartzAudio.c' || echo '$(srcdir)/'`quartz/quartzAudio.c

Xquartz-quartzAudio.obj: quartz/quartzAudio.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-quartzAudio.obj -MD -MP -MF $(DEPDIR)/Xquartz-quartzAudio.Tpo -c -o Xquartz-quartzAudio.obj `if test -f 'quartz/quartzAudio.c'; then $(CYGPATH_W) 'quartz/quartzAudio.c'; else $(CYGPATH_W) '$(srcdir)/quartz/quartzAudio.c'; fi`
	mv -f $(DEPDIR)/Xquartz-quartzAudio.Tpo $(DEPDIR)/Xquartz-quartzAudio.Po
#	source='quartz/quartzAudio.c' object='Xquartz-quartzAudio.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-quartzAudio.obj `if test -f 'quartz/quartzAudio.c'; then $(CYGPATH_W) 'quartz/quartzAudio.c'; else $(CYGPATH_W) '$(srcdir)/quartz/quartzAudio.c'; fi`

Xquartz-quartzKeyboard.o: quartz/quartzKeyboard.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-quartzKeyboard.o -MD -MP -MF $(DEPDIR)/Xquartz-quartzKeyboard.Tpo -c -o Xquartz-quartzKeyboard.o `test -f 'quartz/quartzKeyboard.c' || echo '$(srcdir)/'`quartz/quartzKeyboard.c
	mv -f $(DEPDIR)/Xquartz-quartzKeyboard.Tpo $(DEPDIR)/Xquartz-quartzKeyboard.Po
#	source='quartz/quartzKeyboard.c' object='Xquartz-quartzKeyboard.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-quartzKeyboard.o `test -f 'quartz/quartzKeyboard.c' || echo '$(srcdir)/'`quartz/quartzKeyboard.c

Xquartz-quartzKeyboard.obj: quartz/quartzKeyboard.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-quartzKeyboard.obj -MD -MP -MF $(DEPDIR)/Xquartz-quartzKeyboard.Tpo -c -o Xquartz-quartzKeyboard.obj `if test -f 'quartz/quartzKeyboard.c'; then $(CYGPATH_W) 'quartz/quartzKeyboard.c'; else $(CYGPATH_W) '$(srcdir)/quartz/quartzKeyboard.c'; fi`
	mv -f $(DEPDIR)/Xquartz-quartzKeyboard.Tpo $(DEPDIR)/Xquartz-quartzKeyboard.Po
#	source='quartz/quartzKeyboard.c' object='Xquartz-quartzKeyboard.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-quartzKeyboard.obj `if test -f 'quartz/quartzKeyboard.c'; then $(CYGPATH_W) 'quartz/quartzKeyboard.c'; else $(CYGPATH_W) '$(srcdir)/quartz/quartzKeyboard.c'; fi`

Xquartz-quartzPasteboard.o: quartz/quartzPasteboard.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-quartzPasteboard.o -MD -MP -MF $(DEPDIR)/Xquartz-quartzPasteboard.Tpo -c -o Xquartz-quartzPasteboard.o `test -f 'quartz/quartzPasteboard.c' || echo '$(srcdir)/'`quartz/quartzPasteboard.c
	mv -f $(DEPDIR)/Xquartz-quartzPasteboard.Tpo $(DEPDIR)/Xquartz-quartzPasteboard.Po
#	source='quartz/quartzPasteboard.c' object='Xquartz-quartzPasteboard.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-quartzPasteboard.o `test -f 'quartz/quartzPasteboard.c' || echo '$(srcdir)/'`quartz/quartzPasteboard.c

Xquartz-quartzPasteboard.obj: quartz/quartzPasteboard.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-quartzPasteboard.obj -MD -MP -MF $(DEPDIR)/Xquartz-quartzPasteboard.Tpo -c -o Xquartz-quartzPasteboard.obj `if test -f 'quartz/quartzPasteboard.c'; then $(CYGPATH_W) 'quartz/quartzPasteboard.c'; else $(CYGPATH_W) '$(srcdir)/quartz/quartzPasteboard.c'; fi`
	mv -f $(DEPDIR)/Xquartz-quartzPasteboard.Tpo $(DEPDIR)/Xquartz-quartzPasteboard.Po
#	source='quartz/quartzPasteboard.c' object='Xquartz-quartzPasteboard.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-quartzPasteboard.obj `if test -f 'quartz/quartzPasteboard.c'; then $(CYGPATH_W) 'quartz/quartzPasteboard.c'; else $(CYGPATH_W) '$(srcdir)/quartz/quartzPasteboard.c'; fi`

Xquartz-quartzStartup.o: quartz/quartzStartup.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-quartzStartup.o -MD -MP -MF $(DEPDIR)/Xquartz-quartzStartup.Tpo -c -o Xquartz-quartzStartup.o `test -f 'quartz/quartzStartup.c' || echo '$(srcdir)/'`quartz/quartzStartup.c
	mv -f $(DEPDIR)/Xquartz-quartzStartup.Tpo $(DEPDIR)/Xquartz-quartzStartup.Po
#	source='quartz/quartzStartup.c' object='Xquartz-quartzStartup.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-quartzStartup.o `test -f 'quartz/quartzStartup.c' || echo '$(srcdir)/'`quartz/quartzStartup.c

Xquartz-quartzStartup.obj: quartz/quartzStartup.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-quartzStartup.obj -MD -MP -MF $(DEPDIR)/Xquartz-quartzStartup.Tpo -c -o Xquartz-quartzStartup.obj `if test -f 'quartz/quartzStartup.c'; then $(CYGPATH_W) 'quartz/quartzStartup.c'; else $(CYGPATH_W) '$(srcdir)/quartz/quartzStartup.c'; fi`
	mv -f $(DEPDIR)/Xquartz-quartzStartup.Tpo $(DEPDIR)/Xquartz-quartzStartup.Po
#	source='quartz/quartzStartup.c' object='Xquartz-quartzStartup.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-quartzStartup.obj `if test -f 'quartz/quartzStartup.c'; then $(CYGPATH_W) 'quartz/quartzStartup.c'; else $(CYGPATH_W) '$(srcdir)/quartz/quartzStartup.c'; fi`

Xquartz-appledri.o: quartz/xpr/appledri.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-appledri.o -MD -MP -MF $(DEPDIR)/Xquartz-appledri.Tpo -c -o Xquartz-appledri.o `test -f 'quartz/xpr/appledri.c' || echo '$(srcdir)/'`quartz/xpr/appledri.c
	mv -f $(DEPDIR)/Xquartz-appledri.Tpo $(DEPDIR)/Xquartz-appledri.Po
#	source='quartz/xpr/appledri.c' object='Xquartz-appledri.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-appledri.o `test -f 'quartz/xpr/appledri.c' || echo '$(srcdir)/'`quartz/xpr/appledri.c

Xquartz-appledri.obj: quartz/xpr/appledri.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-appledri.obj -MD -MP -MF $(DEPDIR)/Xquartz-appledri.Tpo -c -o Xquartz-appledri.obj `if test -f 'quartz/xpr/appledri.c'; then $(CYGPATH_W) 'quartz/xpr/appledri.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/appledri.c'; fi`
	mv -f $(DEPDIR)/Xquartz-appledri.Tpo $(DEPDIR)/Xquartz-appledri.Po
#	source='quartz/xpr/appledri.c' object='Xquartz-appledri.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-appledri.obj `if test -f 'quartz/xpr/appledri.c'; then $(CYGPATH_W) 'quartz/xpr/appledri.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/appledri.c'; fi`

Xquartz-dri.o: quartz/xpr/dri.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-dri.o -MD -MP -MF $(DEPDIR)/Xquartz-dri.Tpo -c -o Xquartz-dri.o `test -f 'quartz/xpr/dri.c' || echo '$(srcdir)/'`quartz/xpr/dri.c
	mv -f $(DEPDIR)/Xquartz-dri.Tpo $(DEPDIR)/Xquartz-dri.Po
#	source='quartz/xpr/dri.c' object='Xquartz-dri.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-dri.o `test -f 'quartz/xpr/dri.c' || echo '$(srcdir)/'`quartz/xpr/dri.c

Xquartz-dri.obj: quartz/xpr/dri.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-dri.obj -MD -MP -MF $(DEPDIR)/Xquartz-dri.Tpo -c -o Xquartz-dri.obj `if test -f 'quartz/xpr/dri.c'; then $(CYGPATH_W) 'quartz/xpr/dri.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/dri.c'; fi`
	mv -f $(DEPDIR)/Xquartz-dri.Tpo $(DEPDIR)/Xquartz-dri.Po
#	source='quartz/xpr/dri.c' object='Xquartz-dri.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-dri.obj `if test -f 'quartz/xpr/dri.c'; then $(CYGPATH_W) 'quartz/xpr/dri.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/dri.c'; fi`

Xquartz-xprAppleWM.o: quartz/xpr/xprAppleWM.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-xprAppleWM.o -MD -MP -MF $(DEPDIR)/Xquartz-xprAppleWM.Tpo -c -o Xquartz-xprAppleWM.o `test -f 'quartz/xpr/xprAppleWM.c' || echo '$(srcdir)/'`quartz/xpr/xprAppleWM.c
	mv -f $(DEPDIR)/Xquartz-xprAppleWM.Tpo $(DEPDIR)/Xquartz-xprAppleWM.Po
#	source='quartz/xpr/xprAppleWM.c' object='Xquartz-xprAppleWM.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-xprAppleWM.o `test -f 'quartz/xpr/xprAppleWM.c' || echo '$(srcdir)/'`quartz/xpr/xprAppleWM.c

Xquartz-xprAppleWM.obj: quartz/xpr/xprAppleWM.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-xprAppleWM.obj -MD -MP -MF $(DEPDIR)/Xquartz-xprAppleWM.Tpo -c -o Xquartz-xprAppleWM.obj `if test -f 'quartz/xpr/xprAppleWM.c'; then $(CYGPATH_W) 'quartz/xpr/xprAppleWM.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/xprAppleWM.c'; fi`
	mv -f $(DEPDIR)/Xquartz-xprAppleWM.Tpo $(DEPDIR)/Xquartz-xprAppleWM.Po
#	source='quartz/xpr/xprAppleWM.c' object='Xquartz-xprAppleWM.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-xprAppleWM.obj `if test -f 'quartz/xpr/xprAppleWM.c'; then $(CYGPATH_W) 'quartz/xpr/xprAppleWM.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/xprAppleWM.c'; fi`

Xquartz-xprCursor.o: quartz/xpr/xprCursor.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-xprCursor.o -MD -MP -MF $(DEPDIR)/Xquartz-xprCursor.Tpo -c -o Xquartz-xprCursor.o `test -f 'quartz/xpr/xprCursor.c' || echo '$(srcdir)/'`quartz/xpr/xprCursor.c
	mv -f $(DEPDIR)/Xquartz-xprCursor.Tpo $(DEPDIR)/Xquartz-xprCursor.Po
#	source='quartz/xpr/xprCursor.c' object='Xquartz-xprCursor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-xprCursor.o `test -f 'quartz/xpr/xprCursor.c' || echo '$(srcdir)/'`quartz/xpr/xprCursor.c

Xquartz-xprCursor.obj: quartz/xpr/xprCursor.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-xprCursor.obj -MD -MP -MF $(DEPDIR)/Xquartz-xprCursor.Tpo -c -o Xquartz-xprCursor.obj `if test -f 'quartz/xpr/xprCursor.c'; then $(CYGPATH_W) 'quartz/xpr/xprCursor.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/xprCursor.c'; fi`
	mv -f $(DEPDIR)/Xquartz-xprCursor.Tpo $(DEPDIR)/Xquartz-xprCursor.Po
#	source='quartz/xpr/xprCursor.c' object='Xquartz-xprCursor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-xprCursor.obj `if test -f 'quartz/xpr/xprCursor.c'; then $(CYGPATH_W) 'quartz/xpr/xprCursor.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/xprCursor.c'; fi`

Xquartz-xprFrame.o: quartz/xpr/xprFrame.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-xprFrame.o -MD -MP -MF $(DEPDIR)/Xquartz-xprFrame.Tpo -c -o Xquartz-xprFrame.o `test -f 'quartz/xpr/xprFrame.c' || echo '$(srcdir)/'`quartz/xpr/xprFrame.c
	mv -f $(DEPDIR)/Xquartz-xprFrame.Tpo $(DEPDIR)/Xquartz-xprFrame.Po
#	source='quartz/xpr/xprFrame.c' object='Xquartz-xprFrame.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-xprFrame.o `test -f 'quartz/xpr/xprFrame.c' || echo '$(srcdir)/'`quartz/xpr/xprFrame.c

Xquartz-xprFrame.obj: quartz/xpr/xprFrame.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-xprFrame.obj -MD -MP -MF $(DEPDIR)/Xquartz-xprFrame.Tpo -c -o Xquartz-xprFrame.obj `if test -f 'quartz/xpr/xprFrame.c'; then $(CYGPATH_W) 'quartz/xpr/xprFrame.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/xprFrame.c'; fi`
	mv -f $(DEPDIR)/Xquartz-xprFrame.Tpo $(DEPDIR)/Xquartz-xprFrame.Po
#	source='quartz/xpr/xprFrame.c' object='Xquartz-xprFrame.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-xprFrame.obj `if test -f 'quartz/xpr/xprFrame.c'; then $(CYGPATH_W) 'quartz/xpr/xprFrame.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/xprFrame.c'; fi`

Xquartz-xprScreen.o: quartz/xpr/xprScreen.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-xprScreen.o -MD -MP -MF $(DEPDIR)/Xquartz-xprScreen.Tpo -c -o Xquartz-xprScreen.o `test -f 'quartz/xpr/xprScreen.c' || echo '$(srcdir)/'`quartz/xpr/xprScreen.c
	mv -f $(DEPDIR)/Xquartz-xprScreen.Tpo $(DEPDIR)/Xquartz-xprScreen.Po
#	source='quartz/xpr/xprScreen.c' object='Xquartz-xprScreen.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-xprScreen.o `test -f 'quartz/xpr/xprScreen.c' || echo '$(srcdir)/'`quartz/xpr/xprScreen.c

Xquartz-xprScreen.obj: quartz/xpr/xprScreen.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-xprScreen.obj -MD -MP -MF $(DEPDIR)/Xquartz-xprScreen.Tpo -c -o Xquartz-xprScreen.obj `if test -f 'quartz/xpr/xprScreen.c'; then $(CYGPATH_W) 'quartz/xpr/xprScreen.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/xprScreen.c'; fi`
	mv -f $(DEPDIR)/Xquartz-xprScreen.Tpo $(DEPDIR)/Xquartz-xprScreen.Po
#	source='quartz/xpr/xprScreen.c' object='Xquartz-xprScreen.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-xprScreen.obj `if test -f 'quartz/xpr/xprScreen.c'; then $(CYGPATH_W) 'quartz/xpr/xprScreen.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/xprScreen.c'; fi`

Xquartz-x-hash.o: quartz/xpr/x-hash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-x-hash.o -MD -MP -MF $(DEPDIR)/Xquartz-x-hash.Tpo -c -o Xquartz-x-hash.o `test -f 'quartz/xpr/x-hash.c' || echo '$(srcdir)/'`quartz/xpr/x-hash.c
	mv -f $(DEPDIR)/Xquartz-x-hash.Tpo $(DEPDIR)/Xquartz-x-hash.Po
#	source='quartz/xpr/x-hash.c' object='Xquartz-x-hash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-x-hash.o `test -f 'quartz/xpr/x-hash.c' || echo '$(srcdir)/'`quartz/xpr/x-hash.c

Xquartz-x-hash.obj: quartz/xpr/x-hash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-x-hash.obj -MD -MP -MF $(DEPDIR)/Xquartz-x-hash.Tpo -c -o Xquartz-x-hash.obj `if test -f 'quartz/xpr/x-hash.c'; then $(CYGPATH_W) 'quartz/xpr/x-hash.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/x-hash.c'; fi`
	mv -f $(DEPDIR)/Xquartz-x-hash.Tpo $(DEPDIR)/Xquartz-x-hash.Po
#	source='quartz/xpr/x-hash.c' object='Xquartz-x-hash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-x-hash.obj `if test -f 'quartz/xpr/x-hash.c'; then $(CYGPATH_W) 'quartz/xpr/x-hash.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/x-hash.c'; fi`

Xquartz-x-hook.o: quartz/xpr/x-hook.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-x-hook.o -MD -MP -MF $(DEPDIR)/Xquartz-x-hook.Tpo -c -o Xquartz-x-hook.o `test -f 'quartz/xpr/x-hook.c' || echo '$(srcdir)/'`quartz/xpr/x-hook.c
	mv -f $(DEPDIR)/Xquartz-x-hook.Tpo $(DEPDIR)/Xquartz-x-hook.Po
#	source='quartz/xpr/x-hook.c' object='Xquartz-x-hook.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-x-hook.o `test -f 'quartz/xpr/x-hook.c' || echo '$(srcdir)/'`quartz/xpr/x-hook.c

Xquartz-x-hook.obj: quartz/xpr/x-hook.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-x-hook.obj -MD -MP -MF $(DEPDIR)/Xquartz-x-hook.Tpo -c -o Xquartz-x-hook.obj `if test -f 'quartz/xpr/x-hook.c'; then $(CYGPATH_W) 'quartz/xpr/x-hook.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/x-hook.c'; fi`
	mv -f $(DEPDIR)/Xquartz-x-hook.Tpo $(DEPDIR)/Xquartz-x-hook.Po
#	source='quartz/xpr/x-hook.c' object='Xquartz-x-hook.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-x-hook.obj `if test -f 'quartz/xpr/x-hook.c'; then $(CYGPATH_W) 'quartz/xpr/x-hook.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/x-hook.c'; fi`

Xquartz-x-list.o: quartz/xpr/x-list.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-x-list.o -MD -MP -MF $(DEPDIR)/Xquartz-x-list.Tpo -c -o Xquartz-x-list.o `test -f 'quartz/xpr/x-list.c' || echo '$(srcdir)/'`quartz/xpr/x-list.c
	mv -f $(DEPDIR)/Xquartz-x-list.Tpo $(DEPDIR)/Xquartz-x-list.Po
#	source='quartz/xpr/x-list.c' object='Xquartz-x-list.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-x-list.o `test -f 'quartz/xpr/x-list.c' || echo '$(srcdir)/'`quartz/xpr/x-list.c

Xquartz-x-list.obj: quartz/xpr/x-list.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -MT Xquartz-x-list.obj -MD -MP -MF $(DEPDIR)/Xquartz-x-list.Tpo -c -o Xquartz-x-list.obj `if test -f 'quartz/xpr/x-list.c'; then $(CYGPATH_W) 'quartz/xpr/x-list.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/x-list.c'; fi`
	mv -f $(DEPDIR)/Xquartz-x-list.Tpo $(DEPDIR)/Xquartz-x-list.Po
#	source='quartz/xpr/x-list.c' object='Xquartz-x-list.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(Xquartz_CFLAGS) $(CFLAGS) -c -o Xquartz-x-list.obj `if test -f 'quartz/xpr/x-list.c'; then $(CYGPATH_W) 'quartz/xpr/x-list.c'; else $(CYGPATH_W) '$(srcdir)/quartz/xpr/x-list.c'; fi`

.m.o:
#	$(OBJCCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
#	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
	source='$<' object='$@' libtool=no \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(OBJCCOMPILE) -c -o $@ $<

.m.obj:
#	$(OBJCCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
#	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
	source='$<' object='$@' libtool=no \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(OBJCCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.m.lo:
#	$(LTOBJCCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
#	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
	source='$<' object='$@' libtool=yes \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(LTOBJCCOMPILE) -c -o $@ $<

crAppleWM.lo: quartz/cr/crAppleWM.m
#	$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -MT crAppleWM.lo -MD -MP -MF $(DEPDIR)/crAppleWM.Tpo -c -o crAppleWM.lo `test -f 'quartz/cr/crAppleWM.m' || echo '$(srcdir)/'`quartz/cr/crAppleWM.m
#	mv -f $(DEPDIR)/crAppleWM.Tpo $(DEPDIR)/crAppleWM.Plo
	source='quartz/cr/crAppleWM.m' object='crAppleWM.lo' libtool=yes \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -c -o crAppleWM.lo `test -f 'quartz/cr/crAppleWM.m' || echo '$(srcdir)/'`quartz/cr/crAppleWM.m

crFrame.lo: quartz/cr/crFrame.m
#	$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -MT crFrame.lo -MD -MP -MF $(DEPDIR)/crFrame.Tpo -c -o crFrame.lo `test -f 'quartz/cr/crFrame.m' || echo '$(srcdir)/'`quartz/cr/crFrame.m
#	mv -f $(DEPDIR)/crFrame.Tpo $(DEPDIR)/crFrame.Plo
	source='quartz/cr/crFrame.m' object='crFrame.lo' libtool=yes \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -c -o crFrame.lo `test -f 'quartz/cr/crFrame.m' || echo '$(srcdir)/'`quartz/cr/crFrame.m

crScreen.lo: quartz/cr/crScreen.m
#	$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -MT crScreen.lo -MD -MP -MF $(DEPDIR)/crScreen.Tpo -c -o crScreen.lo `test -f 'quartz/cr/crScreen.m' || echo '$(srcdir)/'`quartz/cr/crScreen.m
#	mv -f $(DEPDIR)/crScreen.Tpo $(DEPDIR)/crScreen.Plo
	source='quartz/cr/crScreen.m' object='crScreen.lo' libtool=yes \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -c -o crScreen.lo `test -f 'quartz/cr/crScreen.m' || echo '$(srcdir)/'`quartz/cr/crScreen.m

XView.lo: quartz/cr/XView.m
#	$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -MT XView.lo -MD -MP -MF $(DEPDIR)/XView.Tpo -c -o XView.lo `test -f 'quartz/cr/XView.m' || echo '$(srcdir)/'`quartz/cr/XView.m
#	mv -f $(DEPDIR)/XView.Tpo $(DEPDIR)/XView.Plo
	source='quartz/cr/XView.m' object='XView.lo' libtool=yes \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -c -o XView.lo `test -f 'quartz/cr/XView.m' || echo '$(srcdir)/'`quartz/cr/XView.m

X11Application.o: apple/X11Application.m
#	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -MT X11Application.o -MD -MP -MF $(DEPDIR)/X11Application.Tpo -c -o X11Application.o `test -f 'apple/X11Application.m' || echo '$(srcdir)/'`apple/X11Application.m
#	mv -f $(DEPDIR)/X11Application.Tpo $(DEPDIR)/X11Application.Po
	source='apple/X11Application.m' object='X11Application.o' libtool=no \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -c -o X11Application.o `test -f 'apple/X11Application.m' || echo '$(srcdir)/'`apple/X11Application.m

X11Application.obj: apple/X11Application.m
#	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -MT X11Application.obj -MD -MP -MF $(DEPDIR)/X11Application.Tpo -c -o X11Application.obj `if test -f 'apple/X11Application.m'; then $(CYGPATH_W) 'apple/X11Application.m'; else $(CYGPATH_W) '$(srcdir)/apple/X11Application.m'; fi`
#	mv -f $(DEPDIR)/X11Application.Tpo $(DEPDIR)/X11Application.Po
	source='apple/X11Application.m' object='X11Application.obj' libtool=no \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -c -o X11Application.obj `if test -f 'apple/X11Application.m'; then $(CYGPATH_W) 'apple/X11Application.m'; else $(CYGPATH_W) '$(srcdir)/apple/X11Application.m'; fi`

X11Controller.o: apple/X11Controller.m
#	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -MT X11Controller.o -MD -MP -MF $(DEPDIR)/X11Controller.Tpo -c -o X11Controller.o `test -f 'apple/X11Controller.m' || echo '$(srcdir)/'`apple/X11Controller.m
#	mv -f $(DEPDIR)/X11Controller.Tpo $(DEPDIR)/X11Controller.Po
	source='apple/X11Controller.m' object='X11Controller.o' libtool=no \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -c -o X11Controller.o `test -f 'apple/X11Controller.m' || echo '$(srcdir)/'`apple/X11Controller.m

X11Controller.obj: apple/X11Controller.m
#	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -MT X11Controller.obj -MD -MP -MF $(DEPDIR)/X11Controller.Tpo -c -o X11Controller.obj `if test -f 'apple/X11Controller.m'; then $(CYGPATH_W) 'apple/X11Controller.m'; else $(CYGPATH_W) '$(srcdir)/apple/X11Controller.m'; fi`
#	mv -f $(DEPDIR)/X11Controller.Tpo $(DEPDIR)/X11Controller.Po
	source='apple/X11Controller.m' object='X11Controller.obj' libtool=no \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -c -o X11Controller.obj `if test -f 'apple/X11Controller.m'; then $(CYGPATH_W) 'apple/X11Controller.m'; else $(CYGPATH_W) '$(srcdir)/apple/X11Controller.m'; fi`

Preferences.o: quartz/Preferences.m
#	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -MT Preferences.o -MD -MP -MF $(DEPDIR)/Preferences.Tpo -c -o Preferences.o `test -f 'quartz/Preferences.m' || echo '$(srcdir)/'`quartz/Preferences.m
#	mv -f $(DEPDIR)/Preferences.Tpo $(DEPDIR)/Preferences.Po
	source='quartz/Preferences.m' object='Preferences.o' libtool=no \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -c -o Preferences.o `test -f 'quartz/Preferences.m' || echo '$(srcdir)/'`quartz/Preferences.m

Preferences.obj: quartz/Preferences.m
#	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -MT Preferences.obj -MD -MP -MF $(DEPDIR)/Preferences.Tpo -c -o Preferences.obj `if test -f 'quartz/Preferences.m'; then $(CYGPATH_W) 'quartz/Preferences.m'; else $(CYGPATH_W) '$(srcdir)/quartz/Preferences.m'; fi`
#	mv -f $(DEPDIR)/Preferences.Tpo $(DEPDIR)/Preferences.Po
	source='quartz/Preferences.m' object='Preferences.obj' libtool=no \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -c -o Preferences.obj `if test -f 'quartz/Preferences.m'; then $(CYGPATH_W) 'quartz/Preferences.m'; else $(CYGPATH_W) '$(srcdir)/quartz/Preferences.m'; fi`

quartzCocoa.o: quartz/quartzCocoa.m
#	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -MT quartzCocoa.o -MD -MP -MF $(DEPDIR)/quartzCocoa.Tpo -c -o quartzCocoa.o `test -f 'quartz/quartzCocoa.m' || echo '$(srcdir)/'`quartz/quartzCocoa.m
#	mv -f $(DEPDIR)/quartzCocoa.Tpo $(DEPDIR)/quartzCocoa.Po
	source='quartz/quartzCocoa.m' object='quartzCocoa.o' libtool=no \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -c -o quartzCocoa.o `test -f 'quartz/quartzCocoa.m' || echo '$(srcdir)/'`quartz/quartzCocoa.m

quartzCocoa.obj: quartz/quartzCocoa.m
#	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -MT quartzCocoa.obj -MD -MP -MF $(DEPDIR)/quartzCocoa.Tpo -c -o quartzCocoa.obj `if test -f 'quartz/quartzCocoa.m'; then $(CYGPATH_W) 'quartz/quartzCocoa.m'; else $(CYGPATH_W) '$(srcdir)/quartz/quartzCocoa.m'; fi`
#	mv -f $(DEPDIR)/quartzCocoa.Tpo $(DEPDIR)/quartzCocoa.Po
	source='quartz/quartzCocoa.m' object='quartzCocoa.obj' libtool=no \
	DEPDIR=$(DEPDIR) $(OBJCDEPMODE) $(depcomp) \
	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_OBJCFLAGS) $(OBJCFLAGS) -c -o quartzCocoa.obj `if test -f 'quartz/quartzCocoa.m'; then $(CYGPATH_W) 'quartz/quartzCocoa.m'; else $(CYGPATH_W) '$(srcdir)/quartz/quartzCocoa.m'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-man1: $(man1_MANS) $(man_MANS)
	@$(NORMAL_INSTALL)
	test -z "$(man1dir)" || $(MKDIR_P) "$(DESTDIR)$(man1dir)"
	@list='$(man1_MANS) $(dist_man1_MANS) $(nodist_man1_MANS)'; \
	l2='$(man_MANS) $(dist_man_MANS) $(nodist_man_MANS)'; \
	for i in $$l2; do \
	  case "$$i" in \
	    *.1*) list="$$list $$i" ;; \
	  esac; \
	done; \
	for i in $$list; do \
	  if test -f $(srcdir)/$$i; then file=$(srcdir)/$$i; \
	  else file=$$i; fi; \
	  ext=`echo $$i | sed -e 's/^.*\\.//'`; \
	  case "$$ext" in \
	    1*) ;; \
	    *) ext='1' ;; \
	  esac; \
	  inst=`echo $$i | sed -e 's/\\.[0-9a-z]*$$//'`; \
	  inst=`echo $$inst | sed -e 's/^.*\///'`; \
	  inst=`echo $$inst | sed '$(transform)'`.$$ext; \
	  echo " $(INSTALL_DATA) '$$file' '$(DESTDIR)$(man1dir)/$$inst'"; \
	  $(INSTALL_DATA) "$$file" "$(DESTDIR)$(man1dir)/$$inst"; \
	done
uninstall-man1:
	@$(NORMAL_UNINSTALL)
	@list='$(man1_MANS) $(dist_man1_MANS) $(nodist_man1_MANS)'; \
	l2='$(man_MANS) $(dist_man_MANS) $(nodist_man_MANS)'; \
	for i in $$l2; do \
	  case "$$i" in \
	    *.1*) list="$$list $$i" ;; \
	  esac; \
	done; \
	for i in $$list; do \
	  ext=`echo $$i | sed -e 's/^.*\\.//'`; \
	  case "$$ext" in \
	    1*) ;; \
	    *) ext='1' ;; \
	  esac; \
	  inst=`echo $$i | sed -e 's/\\.[0-9a-z]*$$//'`; \
	  inst=`echo $$inst | sed -e 's/^.*\///'`; \
	  inst=`echo $$inst | sed '$(transform)'`.$$ext; \
	  echo " rm -f '$(DESTDIR)$(man1dir)/$$inst'"; \
	  rm -f "$(DESTDIR)$(man1dir)/$$inst"; \
	done

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

$(RECURSIVE_CLEAN_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(MKDIR_P) "$(distdir)/$$subdir" \
	    || exit 1; \
	    distdir=`$(am__cd) $(distdir) && pwd`; \
	    top_distdir=`$(am__cd) $(top_distdir) && pwd`; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$top_distdir" \
	        distdir="$$distdir/$$subdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(LIBRARIES) $(LTLIBRARIES) $(PROGRAMS) $(SCRIPTS) \
		$(MANS)
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(crplugindir)" "$(DESTDIR)$(fullscreenplugindir)" "$(DESTDIR)$(glxAGLplugindir)" "$(DESTDIR)$(glxCGLplugindir)" "$(DESTDIR)$(glxMesaplugindir)" "$(DESTDIR)$(xprplugindir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(macosdir)" "$(DESTDIR)$(macosdir)" "$(DESTDIR)$(man1dir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-binPROGRAMS clean-crpluginLTLIBRARIES \
	clean-fullscreenpluginLTLIBRARIES clean-generic \
	clean-glxAGLpluginLTLIBRARIES clean-glxCGLpluginLTLIBRARIES \
	clean-glxMesapluginLTLIBRARIES clean-libtool \
	clean-macosPROGRAMS clean-noinstLIBRARIES \
	clean-xprpluginLTLIBRARIES mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

info: info-recursive

info-am:

install-data-am: install-crpluginLTLIBRARIES \
	install-fullscreenpluginLTLIBRARIES \
	install-glxAGLpluginLTLIBRARIES \
	install-glxCGLpluginLTLIBRARIES \
	install-glxMesapluginLTLIBRARIES install-macosPROGRAMS \
	install-macosSCRIPTS install-man install-xprpluginLTLIBRARIES
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) install-data-hook

install-dvi: install-dvi-recursive

install-exec-am: install-binPROGRAMS

install-html: install-html-recursive

install-info: install-info-recursive

install-man: install-man1

install-pdf: install-pdf-recursive

install-ps: install-ps-recursive

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-crpluginLTLIBRARIES \
	uninstall-fullscreenpluginLTLIBRARIES \
	uninstall-glxAGLpluginLTLIBRARIES \
	uninstall-glxCGLpluginLTLIBRARIES \
	uninstall-glxMesapluginLTLIBRARIES uninstall-macosPROGRAMS \
	uninstall-macosSCRIPTS uninstall-man \
	uninstall-xprpluginLTLIBRARIES
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) uninstall-hook

uninstall-man: uninstall-man1

.MAKE: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) install-am \
	install-data-am install-strip uninstall-am

.PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \
	all all-am check check-am clean clean-binPROGRAMS \
	clean-crpluginLTLIBRARIES clean-fullscreenpluginLTLIBRARIES \
	clean-generic clean-glxAGLpluginLTLIBRARIES \
	clean-glxCGLpluginLTLIBRARIES clean-glxMesapluginLTLIBRARIES \
	clean-libtool clean-macosPROGRAMS clean-noinstLIBRARIES \
	clean-xprpluginLTLIBRARIES ctags ctags-recursive distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-binPROGRAMS \
	install-crpluginLTLIBRARIES install-data install-data-am \
	install-data-hook install-dvi install-dvi-am install-exec \
	install-exec-am install-fullscreenpluginLTLIBRARIES \
	install-glxAGLpluginLTLIBRARIES \
	install-glxCGLpluginLTLIBRARIES \
	install-glxMesapluginLTLIBRARIES install-html install-html-am \
	install-info install-info-am install-macosPROGRAMS \
	install-macosSCRIPTS install-man install-man1 install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	install-xprpluginLTLIBRARIES installcheck installcheck-am \
	installdirs installdirs-am maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags tags-recursive uninstall uninstall-am \
	uninstall-binPROGRAMS uninstall-crpluginLTLIBRARIES \
	uninstall-fullscreenpluginLTLIBRARIES \
	uninstall-glxAGLpluginLTLIBRARIES \
	uninstall-glxCGLpluginLTLIBRARIES \
	uninstall-glxMesapluginLTLIBRARIES uninstall-hook \
	uninstall-macosPROGRAMS uninstall-macosSCRIPTS uninstall-man \
	uninstall-man1 uninstall-xprpluginLTLIBRARIES


#x11app:
#	cd apple && xcodebuild CFLAGS="$(XSERVERCFLAGS_CFLAGS)" LDFLAGS="$(XSERVERCFLAGS_LIBS)"

uninstall-hook:
	rm -rf $(DESTDIR)$(macosdir)/XDarwin

install-data-hook: $(HOOK_TARGETS)

xquartz-install-hook:
	mv $(DESTDIR)$(macosdir)/XDarwinApp $(DESTDIR)$(macosdir)/XDarwin
	cd apple && xcodebuild install
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
